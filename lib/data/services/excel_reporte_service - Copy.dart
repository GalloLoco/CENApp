// lib/data/services/excel_reporte_service.dart

import 'dart:io';
import 'package:excel/excel.dart';
import 'dart:math';
import 'package:intl/intl.dart';
import './file_storage_service.dart';

/// Servicio especializado para generar reportes en formato Excel
/// Optimizado para crear hojas de c√°lculo con datos estad√≠sticos,
/// tablas formateadas y representaciones visuales de gr√°ficos
class ExcelReporteService {
  

  /// Genera un reporte completo unificado en Excel que incluye todas las secciones
/// Integra: Resumen General, Uso y Topograf√≠a, Material Dominante, 
/// Sistema Estructural y Evaluaci√≥n de Da√±os en una sola hoja optimizada
Future<String> generarReporteCompletoExcel({
  required String titulo,
  required String subtitulo,
  required Map<String, dynamic> datos,
  required List<Map<String, dynamic>> tablas,
  required Map<String, dynamic> metadatos,
  Directory? directorio,
}) async {
  try {
    print('üìä [EXCEL-COMPLETO] Iniciando generaci√≥n de reporte integral: $titulo');

    // Crear nuevo libro de Excel
    var excel = Excel.createExcel();
    excel.delete('Sheet1');
    
    // Crear hoja √∫nica con todo el contenido integral
    String nombreHoja = 'Reporte Integral Completo';
    excel.copy('Sheet1', nombreHoja);
    excel.delete('Sheet1');
    
    Sheet sheet = excel[nombreHoja];
    
    // Crear contenido integral completo en una sola hoja
    await _crearContenidoReporteCompletoIntegral(
      sheet, titulo, subtitulo, datos, tablas, metadatos
    );

    // Guardar archivo con nombre espec√≠fico
    final String rutaArchivo = await _guardarArchivoExcelEstandar(
      excel, 
      'reporte_completo_integral', 
      directorio
    );
    
    print('‚úÖ [EXCEL-COMPLETO] Reporte integral Excel generado: $rutaArchivo');
    return rutaArchivo;

  } catch (e) {
    print('‚ùå [EXCEL-COMPLETO] Error al generar reporte integral: $e');
    throw Exception('Error al generar reporte Excel completo: $e');
  }
}

/// Crea todo el contenido del reporte completo integral en una sola hoja
/// Organiza las 5 secciones principales de forma clara y estructurada
Future<void> _crearContenidoReporteCompletoIntegral(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> datos,
  List<Map<String, dynamic>> tablas,
  Map<String, dynamic> metadatos,
) async {
  int filaActual = 0;

  // === ENCABEZADO PRINCIPAL ===
  filaActual = _crearEncabezadoReporteCompleto(
    sheet, titulo, subtitulo, metadatos, filaActual
  );
  filaActual += 2;

  // === RESUMEN EJECUTIVO CONSOLIDADO ===
  filaActual = _crearResumenEjecutivoConsolidado(
    sheet, datos, metadatos, filaActual
  );
  filaActual += 3;

  // === SECCI√ìN 1: RESUMEN GENERAL Y DISTRIBUCI√ìN ===
  filaActual = _crearSeccionResumenGeneralCompleto(
    sheet, datos, filaActual
  );
  filaActual += 3;

  // === SECCI√ìN 2: USO DE VIVIENDA Y TOPOGRAF√çA ===
  filaActual = _crearSeccionUsoTopografiaCompleto(
    sheet, datos, filaActual
  );
  filaActual += 3;

  // === SECCI√ìN 3: MATERIAL DOMINANTE ===
  filaActual = _crearSeccionMaterialDominanteCompleto(
    sheet, datos, filaActual
  );
  filaActual += 3;

  // === SECCI√ìN 4: SISTEMA ESTRUCTURAL ===
  filaActual = _crearSeccionSistemaEstructuralCompleto(
    sheet, datos, filaActual
  );
  filaActual += 3;

  // === SECCI√ìN 5: EVALUACI√ìN DE DA√ëOS Y RIESGOS ===
  filaActual = _crearSeccionEvaluacionDanosCompleto(
    sheet, datos, filaActual
  );
  filaActual += 3;

  // === CONCLUSIONES Y RECOMENDACIONES INTEGRALES ===
  _crearConclusionesIntegralesCompletas(
    sheet, datos, metadatos, filaActual
  );
}

/// Crea encabezado espec√≠fico para reporte completo
int _crearEncabezadoReporteCompleto(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo principal destacado
  _setCellValue(sheet, fila, 0, 'REPORTE INTEGRAL DE EVALUACI√ìN ESTRUCTURAL');
  _aplicarEstiloEncabezado(sheet, fila, 0, bold: true, fontSize: 18, backgroundColor: '#1F4E79');
  fila++;

  // Subt√≠tulo descriptivo
  _setCellValue(sheet, fila, 0, 'An√°lisis Multidimensional Completo - 5 M√≥dulos Integrados');
  _aplicarEstiloEncabezado(sheet, fila, 0, bold: true, fontSize: 14, backgroundColor: '#2F5F8F');
  fila++;

  // Informaci√≥n de contexto
  String fechaGeneracion = DateFormat('dd/MM/yyyy HH:mm').format(DateTime.now());
  _setCellValue(sheet, fila, 0, 'Generado: $fechaGeneracion | Formatos: ${metadatos['totalFormatos']} | Per√≠odo: ${metadatos['periodoEvaluacion'] ?? 'No especificado'}');
  _aplicarEstiloEncabezado(sheet, fila, 0, fontSize: 10, backgroundColor: '#E7E6E6');
  fila++;

  return fila;
}

/// Crea resumen ejecutivo consolidado con indicadores clave
int _crearResumenEjecutivoConsolidado(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RESUMEN EJECUTIVO CONSOLIDADO');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  // Calcular indicadores clave de todas las secciones
  
  // Del resumen general
  int ciudadesCubiertas = 0;
  if (datos['resumenGeneral']?['distribucionGeografica']?['ciudades'] != null) {
    ciudadesCubiertas = datos['resumenGeneral']['distribucionGeografica']['ciudades'].length;
  }

  // Del material dominante
  String materialPredominante = 'No determinado';
  if (datos['materialDominante']?['conteoMateriales'] != null) {
    final materiales = Map<String, int>.from(datos['materialDominante']['conteoMateriales']);
    if (materiales.isNotEmpty) {
      final entry = materiales.entries.where((e) => e.value > 0).fold<MapEntry<String, int>?>(
        null, (prev, curr) => prev == null || curr.value > prev.value ? curr : prev);
      if (entry != null) materialPredominante = entry.key;
    }
  }

  // De evaluaci√≥n de da√±os
  int inmueblesSinDano = 0;
  int inmueblesRiesgoAlto = 0;
  if (datos['evaluacionDanos']?['resumenRiesgos'] != null) {
    final riesgos = datos['evaluacionDanos']['resumenRiesgos'];
    inmueblesRiesgoAlto = riesgos['riesgoAlto'] ?? 0;
    inmueblesSinDano = (totalFormatos - (riesgos['riesgoAlto'] ?? 0) - (riesgos['riesgoMedio'] ?? 0) - (riesgos['riesgoBajo'] ?? 0)).toInt();
  }

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Indicador Clave');
  _setCellValue(sheet, fila, 1, 'Valor');
  _setCellValue(sheet, fila, 2, 'Interpretaci√≥n');
  _setCellValue(sheet, fila, 3, 'Estado');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#FFB366');
  fila++;

  // Indicadores consolidados
  final List<List<String>> indicadores = [
    ['Inmuebles evaluados', '$totalFormatos', 'Muestra total analizada', 'Completo'],
    ['Cobertura geogr√°fica', '$ciudadesCubiertas ciudades', 'Distribuci√≥n territorial', ciudadesCubiertas > 3 ? 'Amplia' : 'Limitada'],
    ['Material predominante', materialPredominante, 'Patr√≥n constructivo principal', materialPredominante == 'Concreto' ? 'Resistente' : 'Revisar'],
    ['Inmuebles riesgo alto', '$inmueblesRiesgoAlto', 'Requieren intervenci√≥n inmediata', inmueblesRiesgoAlto > 0 ? 'Cr√≠tico' : 'Estable'],
    ['Tasa de seguridad', '${((inmueblesSinDano / totalFormatos) * 100).toStringAsFixed(1)}%', 'Inmuebles sin da√±os aparentes', inmueblesSinDano > (totalFormatos * 0.7) ? 'Buena' : 'Preocupante'],
  ];

  for (int i = 0; i < indicadores.length; i++) {
    var indicador = indicadores[i];
    _setCellValue(sheet, fila, 0, indicador[0]);
    _setCellValue(sheet, fila, 1, indicador[1]);
    _setCellValue(sheet, fila, 2, indicador[2]);
    _setCellValue(sheet, fila, 3, indicador[3]);
    
    // Color por estado
    String bgColor = '#FFFFFF';
    if (indicador[3] == 'Cr√≠tico' || indicador[3] == 'Preocupante') {
      bgColor = '#FFE8E8';
    } else if (indicador[3] == 'Buena' || indicador[3] == 'Amplia') {
      bgColor = '#E8F5E8';
    } else if (indicador[3] == 'Revisar') {
      bgColor = '#FFF2CC';
    } else {
      bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    }
    
    _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
    fila++;
  }

  return fila;
}

/// Crea secci√≥n consolidada de resumen general
int _crearSeccionResumenGeneralCompleto(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n con n√∫mero
  _setCellValue(sheet, fila, 0, '1. RESUMEN GENERAL Y DISTRIBUCI√ìN TERRITORIAL');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar datos
  if (!datos.containsKey('resumenGeneral')) {
    _setCellValue(sheet, fila, 0, 'Datos de resumen general no disponibles');
    return fila + 1;
  }

  // Distribuci√≥n por ciudades (top 5)
  final distribucionGeo = datos['resumenGeneral']['distribucionGeografica'];
  if (distribucionGeo['ciudades'] != null && distribucionGeo['ciudades'].isNotEmpty) {
    Map<String, int> ciudades = Map<String, int>.from(distribucionGeo['ciudades']);
    
    _setCellValue(sheet, fila, 0, 'TOP 5 CIUDADES CON M√ÅS EVALUACIONES');
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E2EFDA');
    fila++;

    // Encabezados
    _setCellValue(sheet, fila, 0, 'Ciudad');
    _setCellValue(sheet, fila, 1, 'Evaluaciones');
    _setCellValue(sheet, fila, 2, 'Porcentaje');
    _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#9BC2E6');
    fila++;

    var ciudadesTop = ciudades.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));
    ciudadesTop = ciudadesTop.take(5).toList();

    int totalCiudades = ciudades.values.fold(0, (sum, val) => sum + val);

    for (var entry in ciudadesTop) {
      double porcentaje = totalCiudades > 0 ? (entry.value / totalCiudades) * 100 : 0;
      _setCellValue(sheet, fila, 0, entry.key);
      _setCellValue(sheet, fila, 1, entry.value.toString());
      _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(1)}%');
      _aplicarEstiloFila(sheet, fila, 0, 3, fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF');
      fila++;
    }
  }

  return fila;
}

/// Crea secci√≥n consolidada de uso y topograf√≠a
int _crearSeccionUsoTopografiaCompleto(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, '2. USO DE VIVIENDA Y CARACTER√çSTICAS TOPOGR√ÅFICAS');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  if (!datos.containsKey('usoTopografia')) {
    _setCellValue(sheet, fila, 0, 'Datos de uso y topograf√≠a no disponibles');
    return fila + 1;
  }

  // Top 3 usos m√°s comunes
  if (datos['usoTopografia']['usosVivienda']?['estadisticas'] != null) {
    _setCellValue(sheet, fila, 0, 'TOP 3 USOS M√ÅS FRECUENTES');
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E2EFDA');
    fila++;

    final usos = Map<String, dynamic>.from(datos['usoTopografia']['usosVivienda']['estadisticas']);
    var usosOrdenados = usos.entries
        .where((e) => e.value['conteo'] > 0)
        .toList()
      ..sort((a, b) => b.value['conteo'].compareTo(a.value['conteo']));

    for (int i = 0; i < 3 && i < usosOrdenados.length; i++) {
      var entry = usosOrdenados[i];
      _setCellValue(sheet, fila, 0, '${i + 1}. ${entry.key}');
      _setCellValue(sheet, fila, 1, '${entry.value['conteo']} inmuebles');
      _aplicarEstiloFila(sheet, fila, 0, 2, '#F9F9F9');
      fila++;
    }
  }

  fila++; // Espaciado

  // Top 3 topograf√≠as m√°s comunes
  if (datos['usoTopografia']['topografia']?['estadisticas'] != null) {
    _setCellValue(sheet, fila, 0, 'TOP 3 TOPOGRAF√çAS M√ÅS FRECUENTES');
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E2EFDA');
    fila++;

    final topografia = Map<String, dynamic>.from(datos['usoTopografia']['topografia']['estadisticas']);
    var topoOrdenada = topografia.entries
        .where((e) => e.value['conteo'] > 0)
        .toList()
      ..sort((a, b) => b.value['conteo'].compareTo(a.value['conteo']));

    for (int i = 0; i < 3 && i < topoOrdenada.length; i++) {
      var entry = topoOrdenada[i];
      _setCellValue(sheet, fila, 0, '${i + 1}. ${entry.key}');
      _setCellValue(sheet, fila, 1, '${entry.value['conteo']} inmuebles');
      _aplicarEstiloFila(sheet, fila, 0, 2, '#F9F9F9');
      fila++;
    }
  }

  return fila;
}

/// Crea secci√≥n consolidada de material dominante
int _crearSeccionMaterialDominanteCompleto(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, '3. MATERIALES DOMINANTES DE CONSTRUCCI√ìN');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  if (!datos.containsKey('materialDominante')) {
    _setCellValue(sheet, fila, 0, 'Datos de material dominante no disponibles');
    return fila + 1;
  }

  // Distribuci√≥n de materiales
  final materiales = Map<String, int>.from(datos['materialDominante']['conteoMateriales'] ?? {});
  if (materiales.isNotEmpty) {
    _setCellValue(sheet, fila, 0, 'DISTRIBUCI√ìN DE MATERIALES CONSTRUCTIVOS');
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E2EFDA');
    fila++;

    // Encabezados
    _setCellValue(sheet, fila, 0, 'Material');
    _setCellValue(sheet, fila, 1, 'Cantidad');
    _setCellValue(sheet, fila, 2, 'Resistencia');
    _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#C6E0B4');
    fila++;

    // Clasificaci√≥n de resistencia
    Map<String, String> resistenciaMateriales = {
      'Concreto': 'Alta',
      'Ladrillo': 'Media-Alta',
      'Adobe': 'Baja',
      'Madera/L√°mina/Otros': 'Variable',
      'No determinado': 'Desconocida',
    };

    var materialesOrdenados = materiales.entries
        .where((e) => e.value > 0)
        .toList()
      ..sort((a, b) => b.value.compareTo(a.value));

    for (var entry in materialesOrdenados) {
      String resistencia = resistenciaMateriales[entry.key] ?? 'No especificada';
      _setCellValue(sheet, fila, 0, entry.key);
      _setCellValue(sheet, fila, 1, entry.value.toString());
      _setCellValue(sheet, fila, 2, resistencia);
      
      String bgColor = '#FFFFFF';
      if (resistencia == 'Alta') bgColor = '#E8F5E8';
      else if (resistencia == 'Baja') bgColor = '#FFE8E8';
      else if (resistencia == 'Desconocida') bgColor = '#FFF2CC';
      
      _aplicarEstiloFila(sheet, fila, 0, 3, bgColor);
      fila++;
    }
  }

  return fila;
}

/// Crea secci√≥n consolidada de sistema estructural
int _crearSeccionSistemaEstructuralCompleto(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, '4. SISTEMAS ESTRUCTURALES PREDOMINANTES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  if (!datos.containsKey('sistemaEstructural')) {
    _setCellValue(sheet, fila, 0, 'Datos de sistema estructural no disponibles');
    return fila + 1;
  }

  // Elementos m√°s comunes por categor√≠a (top 2 de cada una)
  final categorias = ['direccionX', 'direccionY', 'murosMamposteria', 'cimentacion'];
  final nombresCategoria = ['Direcci√≥n X', 'Direcci√≥n Y', 'Muros Mamposter√≠a', 'Cimentaci√≥n'];

  for (int catIndex = 0; catIndex < categorias.length; catIndex++) {
    String categoria = categorias[catIndex];
    String nombreCategoria = nombresCategoria[catIndex];

    if (datos['sistemaEstructural']['estadisticas']?[categoria] != null) {
      _setCellValue(sheet, fila, 0, 'TOP 2 EN $nombreCategoria');
      _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#F4B183');
      fila++;

      final elementos = Map<String, dynamic>.from(datos['sistemaEstructural']['estadisticas'][categoria]);
      var elementosOrdenados = elementos.entries
          .where((e) => e.value['conteo'] > 0)
          .toList()
        ..sort((a, b) => b.value['conteo'].compareTo(a.value['conteo']));

      for (int i = 0; i < 2 && i < elementosOrdenados.length; i++) {
        var entry = elementosOrdenados[i];
        _setCellValue(sheet, fila, 0, '${i + 1}. ${entry.key}');
        _setCellValue(sheet, fila, 1, '${entry.value['conteo']} casos');
        _aplicarEstiloFila(sheet, fila, 0, 2, '#FFF2E6');
        fila++;
      }

      fila++; // Espaciado entre categor√≠as
    }
  }

  return fila;
}

/// Crea secci√≥n consolidada de evaluaci√≥n de da√±os
int _crearSeccionEvaluacionDanosCompleto(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, '5. EVALUACI√ìN DE DA√ëOS Y AN√ÅLISIS DE RIESGOS');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  if (!datos.containsKey('evaluacionDanos')) {
    _setCellValue(sheet, fila, 0, 'Datos de evaluaci√≥n de da√±os no disponibles');
    return fila + 1;
  }

  // Resumen de riesgos
  if (datos['evaluacionDanos']['resumenRiesgos'] != null) {
    _setCellValue(sheet, fila, 0, 'DISTRIBUCI√ìN DE NIVELES DE RIESGO');
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E2EFDA');
    fila++;

    final riesgos = datos['evaluacionDanos']['resumenRiesgos'];
    
    // Encabezados
    _setCellValue(sheet, fila, 0, 'Nivel de Riesgo');
    _setCellValue(sheet, fila, 1, 'Cantidad');
    _setCellValue(sheet, fila, 2, 'Urgencia');
    _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#F4CCCC');
    fila++;

    // Datos de riesgo
    final List<List<dynamic>> datosRiesgo = [
      ['Riesgo Alto', riesgos['riesgoAlto'] ?? 0, 'Intervenci√≥n inmediata', '#FFE8E8'],
      ['Riesgo Medio', riesgos['riesgoMedio'] ?? 0, 'Refuerzo a mediano plazo', '#FFF2CC'],
      ['Riesgo Bajo', riesgos['riesgoBajo'] ?? 0, 'Monitoreo preventivo', '#E8F5E8'],
    ];

    for (var riesgo in datosRiesgo) {
      _setCellValue(sheet, fila, 0, riesgo[0].toString());
      _setCellValue(sheet, fila, 1, riesgo[1].toString());
      _setCellValue(sheet, fila, 2, riesgo[2].toString());
      _aplicarEstiloFila(sheet, fila, 0, 3, riesgo[3].toString());
      fila++;
    }
  }

  fila++; // Espaciado

  // Nivel de da√±o m√°s cr√≠tico
  if (datos['evaluacionDanos']['estadisticas']?['nivelDano'] != null) {
    _setCellValue(sheet, fila, 0, 'CASOS CR√çTICOS IDENTIFICADOS');
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#FFE2CC');
    fila++;

    final nivelesDano = Map<String, dynamic>.from(datos['evaluacionDanos']['estadisticas']['nivelDano']);
    int colapsoTotal = nivelesDano['Colapso total']?['conteo'] ?? 0;
    int danoSevero = nivelesDano['Da√±o severo']?['conteo'] ?? 0;
    
    if (colapsoTotal > 0 || danoSevero > 0) {
      _setCellValue(sheet, fila, 0, '‚ö†Ô∏è Colapso total: $colapsoTotal inmuebles');
      _aplicarEstiloFila(sheet, fila, 0, 1, '#FFE8E8');
      fila++;
      _setCellValue(sheet, fila, 0, '‚ö†Ô∏è Da√±o severo: $danoSevero inmuebles');
      _aplicarEstiloFila(sheet, fila, 0, 1, '#FFE8E8');
      fila++;
    } else {
      _setCellValue(sheet, fila, 0, '‚úÖ No se detectaron casos cr√≠ticos');
      _aplicarEstiloFila(sheet, fila, 0, 1, '#E8F5E8');
      fila++;
    }
  }

  return fila;
}

/// Crea conclusiones y recomendaciones integrales finales
void _crearConclusionesIntegralesCompletas(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'CONCLUSIONES Y RECOMENDACIONES INTEGRALES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // An√°lisis integral de prioridades
  _setCellValue(sheet, fila, 0, 'MATRIZ DE PRIORIDADES INTEGRALES');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#D9E2F3');
  fila++;

  // Calcular prioridades basadas en todos los datos
  int inmueblesCriticos = 0;
  int inmueblesVulnerables = 0;
  int inmueblesSeguros = 0;

  // De evaluaci√≥n de da√±os
  if (datos['evaluacionDanos']?['resumenRiesgos'] != null) {
    final riesgos = datos['evaluacionDanos']['resumenRiesgos'];
    inmueblesCriticos = (riesgos['riesgoAlto'] ?? 0);
    inmueblesVulnerables = (riesgos['riesgoMedio'] ?? 0);
    inmueblesSeguros = (riesgos['riesgoBajo'] ?? 0);
  }

  // De material dominante
  int materialesVulnerables = 0;
  if (datos['materialDominante']?['conteoMateriales'] != null) {
    final materiales = Map<String, int>.from(datos['materialDominante']['conteoMateriales']);
    materialesVulnerables = (materiales['Adobe'] ?? 0) + (materiales['Madera/L√°mina/Otros'] ?? 0);
  }

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  // Recomendaciones por prioridad
  final List<List<String>> recomendaciones = [
    ['PRIORIDAD CR√çTICA', '$inmueblesCriticos inmuebles', 'Evacuaci√≥n y refuerzo inmediato'],
    ['PRIORIDAD ALTA', '$materialesVulnerables inmuebles', 'Programa de refuerzo estructural'],
    ['PRIORIDAD MEDIA', '$inmueblesVulnerables inmuebles', 'Monitoreo y mejoras graduales'],
    ['MANTENIMIENTO', '$inmueblesSeguros inmuebles', 'Mantenimiento preventivo'],
  ];

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Nivel de Prioridad');
  _setCellValue(sheet, fila, 1, 'Afectados');
  _setCellValue(sheet, fila, 2, 'Acci√≥n Recomendada');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#B4C6E7');
  fila++;

  // Escribir recomendaciones con colores por prioridad
  final List<String> coloresPrioridad = ['#FFE8E8', '#FFF2CC', '#FFF2E6', '#E8F5E8'];
  
  for (int i = 0; i < recomendaciones.length; i++) {
    var recomendacion = recomendaciones[i];
    _setCellValue(sheet, fila, 0, recomendacion[0]);
    _setCellValue(sheet, fila, 1, recomendacion[1]);
    _setCellValue(sheet, fila, 2, recomendacion[2]);
    _aplicarEstiloFila(sheet, fila, 0, 3, coloresPrioridad[i]);
    fila++;
  }

  fila += 2; // Espaciado

  // Conclusi√≥n ejecutiva final
  _setCellValue(sheet, fila, 0, 'CONCLUSI√ìN EJECUTIVA INTEGRAL');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E7E6E6');
  fila++;

  // Generar conclusi√≥n basada en todos los datos
  String conclusion = _generarConclusionIntegral(datos, metadatos, inmueblesCriticos, materialesVulnerables, totalFormatos);
  
  _setCellValue(sheet, fila, 0, conclusion);
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#F9F9F9');
  fila++;

  fila++; // Espaciado final

  // Firma y validaci√≥n
  _setCellValue(sheet, fila, 0, 'Reporte generado autom√°ticamente por CENApp - Sistema de Evaluaci√≥n Estructural');
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#E7E6E6');
  _setCellValue(sheet, fila, 1, DateFormat('dd/MM/yyyy HH:mm').format(DateTime.now()));
  _aplicarEstilo(sheet, fila, 1, backgroundColor: '#E7E6E6');
}

/// Genera conclusi√≥n integral basada en todos los m√≥dulos analizados
String _generarConclusionIntegral(
  Map<String, dynamic> datos, 
  Map<String, dynamic> metadatos,
  int inmueblesCriticos,
  int materialesVulnerables,
  int totalFormatos,
) {
  StringBuffer conclusion = StringBuffer();
  
  conclusion.write('An√°lisis integral de $totalFormatos inmuebles completado. ');
  
  // Evaluaci√≥n general de riesgo
  double porcentajeCritico = totalFormatos > 0 ? (inmueblesCriticos / totalFormatos) * 100 : 0;
  double porcentajeVulnerable = totalFormatos > 0 ? (materialesVulnerables / totalFormatos) * 100 : 0;
  
  if (porcentajeCritico > 10) {
    conclusion.write('ALERTA: ${porcentajeCritico.toStringAsFixed(1)}% de inmuebles en riesgo cr√≠tico requieren intervenci√≥n inmediata. ');
  } else if (porcentajeCritico > 0) {
    conclusion.write('Se identificaron $inmueblesCriticos inmuebles en riesgo cr√≠tico que requieren atenci√≥n prioritaria. ');
  } else {
    conclusion.write('Situaci√≥n general estable sin casos cr√≠ticos identificados. ');
  }
  
  if (porcentajeVulnerable > 30) {
    conclusion.write('El ${porcentajeVulnerable.toStringAsFixed(1)}% de inmuebles presenta materiales vulnerables que requieren programa de refuerzo. ');
  }
  
  // Material predominante
  if (datos['materialDominante']?['conteoMateriales'] != null) {
    final materiales = Map<String, int>.from(datos['materialDominante']['conteoMateriales']);
    if (materiales.isNotEmpty) {
      final materialPrincipal = materiales.entries
          .where((e) => e.value > 0)
          .fold<MapEntry<String, int>?>(null, (prev, curr) => prev == null || curr.value > prev.value ? curr : prev);
      if (materialPrincipal != null) {
        conclusion.write('Material predominante: ${materialPrincipal.key}. ');
      }
    }
  }
  
  conclusion.write('Se recomienda implementar las acciones prioritarias identificadas para optimizar la seguridad estructural regional.');
  
  return conclusion.toString();
}




  Future<String> generarReporteEvaluacionDanosExcel({
  required String titulo,
  required String subtitulo,
  required Map<String, dynamic> datos,
  required List<Map<String, dynamic>> tablas,
  required Map<String, dynamic> metadatos,
  Directory? directorio,
}) async {
  try {
    print('üìä [EXCEL-DA√ëOS] Iniciando generaci√≥n de reporte Excel: $titulo');

    // Crear nuevo libro de Excel usando la librer√≠a excel
    var excel = Excel.createExcel();
    
    // Eliminar hoja por defecto
    excel.delete('Sheet1');
    
    // Crear hoja √∫nica con todo el contenido
    String nombreHoja = 'Evaluaci√≥n de Da√±os';
    excel.copy('Sheet1', nombreHoja);
    excel.delete('Sheet1');
    
    Sheet sheet = excel[nombreHoja];
    
    // Crear contenido completo en una sola hoja
    await _crearContenidoEvaluacionDanosCompleto(sheet, titulo, subtitulo, datos, tablas, metadatos);

    // Guardar archivo
    final String rutaArchivo = await _guardarArchivoExcelEstandar(
      excel, 
      titulo, 
      directorio
    );
    
    print('‚úÖ [EXCEL-DA√ëOS] Reporte Excel generado exitosamente: $rutaArchivo');
    return rutaArchivo;

  } catch (e) {
    print('‚ùå [EXCEL-DA√ëOS] Error al generar reporte Excel: $e');
    throw Exception('Error al generar reporte Excel de evaluaci√≥n de da√±os: $e');
  }
}

/// Crea todo el contenido del reporte de evaluaci√≥n de da√±os en una sola hoja
Future<void> _crearContenidoEvaluacionDanosCompleto(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> datos,
  List<Map<String, dynamic>> tablas,
  Map<String, dynamic> metadatos,
) async {
  int filaActual = 0;

  // === SECCI√ìN 1: ENCABEZADO ===
  filaActual = _crearEncabezadoUsoTopografia(sheet, titulo, subtitulo, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 2: FILTROS APLICADOS ===
  filaActual = _crearSeccionFiltrosUsoTopografia(sheet, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 3: RESUMEN DE RIESGOS ===
  filaActual = _crearResumenRiesgosGenerales(sheet, datos, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 4: AN√ÅLISIS GEOT√âCNICO ===
  filaActual = _crearAnalisisGeotecnico(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 5: EVALUACI√ìN DE SISTEMAS ESTRUCTURALES ===
  filaActual = _crearEvaluacionSistemasEstructurales(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 6: CLASIFICACI√ìN POR NIVEL DE DA√ëO ===
  filaActual = _crearClasificacionNivelDano(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 7: RECOMENDACIONES DE INTERVENCI√ìN ===
  _crearRecomendacionesIntervencion(sheet, datos, metadatos, filaActual);
}

/// Crea resumen de riesgos generales
int _crearResumenRiesgosGenerales(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RESUMEN DE RIESGOS GENERALES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  // Extraer datos de resumen de riesgos
  Map<String, dynamic> resumenRiesgos = {};
  if (datos.containsKey('resumenRiesgos')) {
    resumenRiesgos = Map<String, dynamic>.from(datos['resumenRiesgos']);
  }

  int riesgoAlto = resumenRiesgos['riesgoAlto'] ?? 0;
  int riesgoMedio = resumenRiesgos['riesgoMedio'] ?? 0;
  int riesgoBajo = resumenRiesgos['riesgoBajo'] ?? 0;

  // Encabezados de tabla
  _setCellValue(sheet, fila, 0, 'Nivel de Riesgo');
  _setCellValue(sheet, fila, 1, 'Cantidad');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Prioridad de Intervenci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#FF6B6B');
  fila++;

  // Calcular porcentajes
  double porcentajeAlto = totalFormatos > 0 ? (riesgoAlto / totalFormatos) * 100 : 0;
  double porcentajeMedio = totalFormatos > 0 ? (riesgoMedio / totalFormatos) * 100 : 0;
  double porcentajeBajo = totalFormatos > 0 ? (riesgoBajo / totalFormatos) * 100 : 0;

  // Datos de riesgos con colores espec√≠ficos
  final List<List<dynamic>> datosRiesgos = [
    ['RIESGO ALTO', riesgoAlto, '${porcentajeAlto.toStringAsFixed(1)}%', 'INMEDIATA', '#FFE8E8'],
    ['RIESGO MEDIO', riesgoMedio, '${porcentajeMedio.toStringAsFixed(1)}%', 'URGENTE', '#FFF2CC'],
    ['RIESGO BAJO', riesgoBajo, '${porcentajeBajo.toStringAsFixed(1)}%', 'PROGRAMADA', '#E8F5E8'],
  ];

  for (var datosRiesgo in datosRiesgos) {
    _setCellValue(sheet, fila, 0, datosRiesgo[0]);
    _setCellValue(sheet, fila, 1, datosRiesgo[1].toString());
    _setCellValue(sheet, fila, 2, datosRiesgo[2]);
    _setCellValue(sheet, fila, 3, datosRiesgo[3]);
    
    _aplicarEstiloFila(sheet, fila, 0, 4, datosRiesgo[4]);
    fila++;
  }

  // Total
  _setCellValue(sheet, fila, 0, 'TOTAL EVALUADO');
  _setCellValue(sheet, fila, 1, totalFormatos.toString());
  _setCellValue(sheet, fila, 2, '100%');
  _setCellValue(sheet, fila, 3, 'Base de an√°lisis');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#D9E2F3');
  fila++;

  return fila;
}

/// Crea an√°lisis geot√©cnico detallado
int _crearAnalisisGeotecnico(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'AN√ÅLISIS GEOT√âCNICO Y CIMENTACI√ìN');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos geot√©cnicos
  if (!datos.containsKey('estadisticas') || 
      !datos['estadisticas'].containsKey('geotecnicos')) {
    _setCellValue(sheet, fila, 0, 'No hay datos geot√©cnicos disponibles');
    return fila + 1;
  }

  Map<String, dynamic> geotecnicos = datos['estadisticas']['geotecnicos'];

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Problema Geot√©cnico');
  _setCellValue(sheet, fila, 1, 'Inmuebles Afectados');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Nivel de Gravedad');
  _setCellValue(sheet, fila, 4, 'Acci√≥n Recomendada');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 5, '#8B4513');
  fila++;

  // Mapeo de gravedad y acciones
  Map<String, Map<String, String>> accionesGeotecnicas = {
    'Grietas en el terreno': {
      'gravedad': 'ALTA',
      'accion': 'Estudio geot√©cnico especializado'
    },
    'Hundimientos': {
      'gravedad': 'CR√çTICA',
      'accion': 'Evaluaci√≥n estructural inmediata'
    },
    'Inclinaci√≥n del edificio': {
      'gravedad': 'CR√çTICA',
      'accion': 'Evacuaci√≥n y refuerzo urgente'
    },
  };

  // Procesar datos geot√©cnicos
  geotecnicos.forEach((problema, stats) {
    int conteo = stats['conteo'] ?? 0;
    double porcentaje = stats['porcentaje'] ?? 0;
    
    if (conteo > 0) {
      var info = accionesGeotecnicas[problema] ?? {
        'gravedad': 'MEDIA',
        'accion': 'Evaluaci√≥n espec√≠fica requerida'
      };

      _setCellValue(sheet, fila, 0, problema);
      _setCellValue(sheet, fila, 1, conteo.toString());
      _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(1)}%');
      _setCellValue(sheet, fila, 3, info['gravedad']!);
      _setCellValue(sheet, fila, 4, info['accion']!);
      
      // Color seg√∫n gravedad
      String bgColor = '#FFFFFF';
      if (info['gravedad'] == 'CR√çTICA') bgColor = '#FFE8E8';
      else if (info['gravedad'] == 'ALTA') bgColor = '#FFF2CC';
      else bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
      
      _aplicarEstiloFila(sheet, fila, 0, 5, bgColor);
      fila++;
    }
  });

  return fila;
}

/// Crea evaluaci√≥n de sistemas estructurales
int _crearEvaluacionSistemasEstructurales(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'EVALUACI√ìN DE SISTEMAS ESTRUCTURALES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Categor√≠as a evaluar
  final List<Map<String, String>> categorias = [
    {'id': 'sistemaEstructuralDeficiente', 'titulo': 'Calidad Estructural'},
    {'id': 'techoPesado', 'titulo': 'Sistema de Techo'},
    {'id': 'murosDelgados', 'titulo': 'Refuerzo en Muros'},
    {'id': 'irregularidadPlanta', 'titulo': 'Geometr√≠a en Planta'},
    {'id': 'losas', 'titulo': 'Condici√≥n de Losas'},
  ];

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Sistema Evaluado');
  _setCellValue(sheet, fila, 1, 'Condici√≥n Principal');
  _setCellValue(sheet, fila, 2, 'Cantidad');
  _setCellValue(sheet, fila, 3, 'Porcentaje');
  _setCellValue(sheet, fila, 4, 'Recomendaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 5, '#4472C4');
  fila++;

  // Procesar cada categor√≠a
  for (var categoria in categorias) {
    String id = categoria['id']!;
    String titulo = categoria['titulo']!;
    
    if (datos['estadisticas'].containsKey(id)) {
      Map<String, dynamic> estadisticasCategoria = datos['estadisticas'][id];
      
      // Encontrar la condici√≥n predominante
      String condicionPrincipal = 'No determinada';
      int maxConteo = 0;
      double maxPorcentaje = 0;
      
      estadisticasCategoria.forEach((condicion, stats) {
        int conteo = stats['conteo'] ?? 0;
        if (conteo > maxConteo) {
          maxConteo = conteo;
          maxPorcentaje = stats['porcentaje'] ?? 0;
          condicionPrincipal = condicion;
        }
      });
      
      // Generar recomendaci√≥n
      String recomendacion = _generarRecomendacionSistema(id, condicionPrincipal);
      
      _setCellValue(sheet, fila, 0, titulo);
      _setCellValue(sheet, fila, 1, condicionPrincipal);
      _setCellValue(sheet, fila, 2, maxConteo.toString());
      _setCellValue(sheet, fila, 3, '${maxPorcentaje.toStringAsFixed(1)}%');
      _setCellValue(sheet, fila, 4, recomendacion);
      
      // Color seg√∫n riesgo impl√≠cito
      String bgColor = _obtenerColorRiesgoSistema(id, condicionPrincipal);
      _aplicarEstiloFila(sheet, fila, 0, 5, bgColor);
      fila++;
    }
  }

  return fila;
}

/// Crea clasificaci√≥n por nivel de da√±o
int _crearClasificacionNivelDano(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'CLASIFICACI√ìN POR NIVEL DE DA√ëO');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar datos de nivel de da√±o
  if (!datos['estadisticas'].containsKey('nivelDano')) {
    _setCellValue(sheet, fila, 0, 'No hay datos de clasificaci√≥n de da√±os');
    return fila + 1;
  }

  Map<String, dynamic> nivelDano = datos['estadisticas']['nivelDano'];

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Nivel de Da√±o');
  _setCellValue(sheet, fila, 1, 'Inmuebles');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Tiempo de Respuesta');
  _setCellValue(sheet, fila, 4, 'Acciones Prioritarias');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 5, '#C5504B');
  fila++;

  // Ordenar por gravedad (de mayor a menor)
  final ordenGravedad = [
    'Colapso total',
    'Da√±o severo', 
    'Da√±o medio',
    'Da√±o ligero',
    'Sin da√±o aparente'
  ];

  // Mapeo de tiempos y acciones
  Map<String, Map<String, String>> accionesPorNivel = {
    'Colapso total': {
      'tiempo': 'INMEDIATO',
      'acciones': 'Evacuaci√≥n, demolici√≥n controlada'
    },
    'Da√±o severo': {
      'tiempo': '24-48 HORAS',
      'acciones': 'Refuerzo urgente, apuntalamiento'
    },
    'Da√±o medio': {
      'tiempo': '1-2 SEMANAS',
      'acciones': 'Reparaci√≥n estructural programada'
    },
    'Da√±o ligero': {
      'tiempo': '1-3 MESES',
      'acciones': 'Mantenimiento preventivo'
    },
    'Sin da√±o aparente': {
      'tiempo': 'MONITOREO',
      'acciones': 'Inspecci√≥n peri√≥dica'
    },
  };

  for (String nivel in ordenGravedad) {
    if (nivelDano.containsKey(nivel)) {
      int conteo = nivelDano[nivel]['conteo'] ?? 0;
      double porcentaje = nivelDano[nivel]['porcentaje'] ?? 0;
      
      if (conteo > 0) {
        var info = accionesPorNivel[nivel]!;
        
        _setCellValue(sheet, fila, 0, nivel.toUpperCase());
        _setCellValue(sheet, fila, 1, conteo.toString());
        _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(1)}%');
        _setCellValue(sheet, fila, 3, info['tiempo']!);
        _setCellValue(sheet, fila, 4, info['acciones']!);
        
        // Color seg√∫n severidad
        String bgColor = _obtenerColorNivelDano(nivel);
        _aplicarEstiloFila(sheet, fila, 0, 5, bgColor);
        fila++;
      }
    }
  }

  return fila;
}

/// Crea recomendaciones de intervenci√≥n
void _crearRecomendacionesIntervencion(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RECOMENDACIONES DE INTERVENCI√ìN');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // An√°lisis de prioridades
  Map<String, dynamic> resumenRiesgos = datos['resumenRiesgos'] ?? {};
  int riesgoAlto = resumenRiesgos['riesgoAlto'] ?? 0;
  int riesgoMedio = resumenRiesgos['riesgoMedio'] ?? 0;
  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  _setCellValue(sheet, fila, 0, 'PLAN DE ACCI√ìN PRIORITARIO:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E74C3C');
  fila++;

  // Recomendaciones espec√≠ficas basadas en datos
  List<String> recomendaciones = [];

  if (riesgoAlto > 0) {
    double porcentajeAlto = (riesgoAlto / totalFormatos) * 100;
    recomendaciones.add('‚Ä¢ PRIORIDAD 1: Intervenci√≥n inmediata en $riesgoAlto inmuebles de riesgo alto (${porcentajeAlto.toStringAsFixed(1)}%)');
  }

  if (riesgoMedio > 0) {
    double porcentajeMedio = (riesgoMedio / totalFormatos) * 100;
    recomendaciones.add('‚Ä¢ PRIORIDAD 2: Programar refuerzo en $riesgoMedio inmuebles de riesgo medio (${porcentajeMedio.toStringAsFixed(1)}%)');
  }

  // Verificar problemas geot√©cnicos
  if (datos['estadisticas'].containsKey('geotecnicos')) {
    Map<String, dynamic> geotecnicos = datos['estadisticas']['geotecnicos'];
    int problemasGeo = 0;
    geotecnicos.forEach((problema, stats) {
      problemasGeo += stats['conteo'] as int? ?? 0;
    });
    
    if (problemasGeo > 0) {
      recomendaciones.add('‚Ä¢ Realizar estudios geot√©cnicos especializados para $problemasGeo casos identificados');
    }
  }

  recomendaciones.addAll([
    '‚Ä¢ Establecer sistema de monitoreo continuo para inmuebles en riesgo',
    '‚Ä¢ Capacitar equipos de respuesta para emergencias estructurales',
    '‚Ä¢ Desarrollar protocolos de evacuaci√≥n espec√≠ficos por nivel de da√±o',
    '‚Ä¢ Implementar inspecciones peri√≥dicas programadas',
  ]);

  // Escribir recomendaciones
  for (String recomendacion in recomendaciones) {
    _setCellValue(sheet, fila, 0, recomendacion);
    _aplicarEstilo(sheet, fila, 0, backgroundColor: '#F8F9FA');
    fila++;
  }

  fila++;

  // Conclusi√≥n final
  String conclusion = metadatos['conclusiones'] ?? 
      'An√°lisis completado. Se requiere acci√≥n inmediata en inmuebles de alto riesgo y seguimiento programado para el resto.';

  _setCellValue(sheet, fila, 0, 'CONCLUSI√ìN:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#3498DB');
  fila++;

  _setCellValue(sheet, fila, 0, conclusion);
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#EBF3FD');
}

// === M√âTODOS AUXILIARES ESPEC√çFICOS ===

/// Genera recomendaci√≥n espec√≠fica para cada sistema
String _generarRecomendacionSistema(String idSistema, String condicion) {
  Map<String, Map<String, String>> recomendaciones = {
    'sistemaEstructuralDeficiente': {
      'Sistema deficiente': 'Refuerzo estructural urgente',
      'Sistema adecuado': 'Mantenimiento preventivo regular'
    },
    'techoPesado': {
      'Techo pesado': 'Evaluar carga estructural y reforzar',
      'Techo ligero': 'Verificar anclajes y conectores'
    },
    'murosDelgados': {
      'Muros sin refuerzo': 'Instalar refuerzo s√≠smico',
      'Muros reforzados': 'Inspecci√≥n de refuerzos existentes'
    },
    'irregularidadPlanta': {
      'Geometr√≠a irregular': 'An√°lisis s√≠smico especializado',
      'Geometr√≠a regular': 'Monitoreo est√°ndar'
    },
    'losas': {
      'Colapso': 'Reparaci√≥n o reemplazo inmediato',
      'Grietas m√°ximas': 'Sellado y monitoreo de grietas',
      'Flecha m√°xima': 'Evaluaci√≥n de capacidad de carga'
    }
  };

  return recomendaciones[idSistema]?[condicion] ?? 'Evaluaci√≥n t√©cnica especializada';
}

/// Obtiene color seg√∫n riesgo del sistema
String _obtenerColorRiesgoSistema(String idSistema, String condicion) {
  // Condiciones de alto riesgo
  List<String> altoRiesgo = [
    'Sistema deficiente', 'Techo pesado', 'Muros sin refuerzo', 
    'Geometr√≠a irregular', 'Colapso'
  ];
  
  if (altoRiesgo.contains(condicion)) return '#FFE8E8';
  return '#E8F5E8';
}

/// Obtiene color seg√∫n nivel de da√±o
String _obtenerColorNivelDano(String nivel) {
  switch (nivel) {
    case 'Colapso total': return '#FF6B6B';
    case 'Da√±o severo': return '#FF9F43';
    case 'Da√±o medio': return '#FFA502';
    case 'Da√±o ligero': return '#7BED9F';
    case 'Sin da√±o aparente': return '#70A1FF';
    default: return '#FFFFFF';
  }
}


  /// Genera un reporte completo de Sistema Estructural en Excel
/// Incluye an√°lisis detallado de elementos estructurales por categor√≠a
Future<String> generarReporteSistemaEstructuralExcel({
  required String titulo,
  required String subtitulo,
  required Map<String, dynamic> datos,
  required List<Map<String, dynamic>> tablas,
  required Map<String, dynamic> metadatos,
  Directory? directorio,
}) async {
  try {
    print('üìä [EXCEL-SISTEMA] Iniciando generaci√≥n de reporte Excel: $titulo');

    // Crear nuevo libro de Excel usando la librer√≠a excel
    var excel = Excel.createExcel();
    
    // Eliminar hoja por defecto
    excel.delete('Sheet1');
    
    // Crear hoja √∫nica con todo el contenido
    String nombreHoja = 'Sistema Estructural';
    excel.copy('Sheet1', nombreHoja);
    excel.delete('Sheet1');
    
    Sheet sheet = excel[nombreHoja];
    
    // Crear contenido completo en una sola hoja
    await _crearContenidoSistemaEstructuralCompleto(sheet, titulo, subtitulo, datos, tablas, metadatos);

    // Guardar archivo
    final String rutaArchivo = await _guardarArchivoExcelEstandar(
      excel, 
      titulo, 
      directorio
    );
    
    print('‚úÖ [EXCEL-SISTEMA] Reporte Excel generado exitosamente: $rutaArchivo');
    return rutaArchivo;

  } catch (e) {
    print('‚ùå [EXCEL-SISTEMA] Error al generar reporte Excel: $e');
    throw Exception('Error al generar reporte Excel de sistema estructural: $e');
  }
}

/// Crea todo el contenido del reporte de sistema estructural en una sola hoja
Future<void> _crearContenidoSistemaEstructuralCompleto(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> datos,
  List<Map<String, dynamic>> tablas,
  Map<String, dynamic> metadatos,
) async {
  int filaActual = 0;

  // === SECCI√ìN 1: ENCABEZADO ===
  filaActual = _crearEncabezadoUsoTopografia(sheet, titulo, subtitulo, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 2: FILTROS APLICADOS ===
  filaActual = _crearSeccionFiltrosUsoTopografia(sheet, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 3: RESUMEN ESTAD√çSTICO ===
  filaActual = _crearResumenEstadisticoSistemaEstructural(sheet, datos, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 4: AN√ÅLISIS POR CATEGOR√çAS ESTRUCTURALES ===
  filaActual = _crearAnalisisCategorias(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 5: MATRIZ DE COMPATIBILIDAD ===
  filaActual = _crearMatrizCompatibilidad(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 6: EVALUACI√ìN DE VULNERABILIDAD ===
  filaActual = _crearEvaluacionVulnerabilidad(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 7: RECOMENDACIONES T√âCNICAS ===
  _crearRecomendacionesTecnicasSistema(sheet, datos, metadatos, filaActual);
}

/// Crea resumen estad√≠stico espec√≠fico para sistema estructural
int _crearResumenEstadisticoSistemaEstructural(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RESUMEN ESTAD√çSTICO SISTEMA ESTRUCTURAL');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  // Categor√≠as del sistema estructural
  final List<String> categorias = [
    'direccionX', 'direccionY', 'murosMamposteria', 
    'sistemasPiso', 'sistemasTecho', 'cimentacion'
  ];

  // Calcular estad√≠sticas por categor√≠a
  int totalElementos = 0;
  int categoriasConDatos = 0;
  
  for (String categoria in categorias) {
    if (datos['estadisticas']?.containsKey(categoria) == true) {
      Map<String, dynamic> estadisticasCategoria = datos['estadisticas'][categoria];
      if (estadisticasCategoria.isNotEmpty) {
        categoriasConDatos++;
        totalElementos += estadisticasCategoria.values
            .map((e) => e['conteo'] as int? ?? 0)
            .fold(0, (sum, count) => sum + count);
      }
    }
  }

  // Encabezados de tabla
  _setCellValue(sheet, fila, 0, 'Concepto');
  _setCellValue(sheet, fila, 1, 'Valor');
  _setCellValue(sheet, fila, 2, 'Interpretaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#9BC2E6');
  fila++;

  // Estad√≠sticas principales
  final List<List<String>> estadisticas = [
    ['Total inmuebles analizados', '$totalFormatos', '100% de la muestra'],
    ['Categor√≠as con datos', '$categoriasConDatos', 'De 6 categor√≠as principales'],
    ['Total elementos registrados', '$totalElementos', 'Suma de todos los elementos'],
    ['Promedio elementos/inmueble', 
     totalFormatos > 0 ? (totalElementos / totalFormatos).toStringAsFixed(1) : '0',
     'Diversidad estructural promedio'],
  ];

  // Escribir estad√≠sticas
  for (int i = 0; i < estadisticas.length; i++) {
    var stat = estadisticas[i];
    _setCellValue(sheet, fila, 0, stat[0]);
    _setCellValue(sheet, fila, 1, stat[1]);
    _setCellValue(sheet, fila, 2, stat[2]);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 3, bgColor);
    fila++;
  }

  return fila;
}

/// Crea an√°lisis detallado por categor√≠as estructurales
int _crearAnalisisCategorias(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'AN√ÅLISIS POR CATEGOR√çAS ESTRUCTURALES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Definir categor√≠as con sus nombres legibles y colores
  final List<Map<String, dynamic>> categorias = [
    {'id': 'direccionX', 'nombre': 'Direcci√≥n X', 'color': '#E8F5E8'},
    {'id': 'direccionY', 'nombre': 'Direcci√≥n Y', 'color': '#E8F0FF'},
    {'id': 'murosMamposteria', 'nombre': 'Muros de Mamposter√≠a', 'color': '#FFF2CC'},
    {'id': 'sistemasPiso', 'nombre': 'Sistemas de Piso', 'color': '#FFE2CC'},
    {'id': 'sistemasTecho', 'nombre': 'Sistemas de Techo', 'color': '#F2E2FF'},
    {'id': 'cimentacion', 'nombre': 'Cimentaci√≥n', 'color': '#E2F0D9'},
  ];

  for (var categoria in categorias) {
    String id = categoria['id'];
    String nombre = categoria['nombre'];
    String color = categoria['color'];

    // Verificar si hay datos para esta categor√≠a
    if (!datos['estadisticas']?.containsKey(id) || 
        datos['estadisticas'][id].isEmpty) {
      continue;
    }

    Map<String, dynamic> estadisticasCategoria = datos['estadisticas'][id];

    // Subt√≠tulo de categor√≠a
    _setCellValue(sheet, fila, 0, nombre.toUpperCase());
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: color);
    fila++;

    // Encabezados espec√≠ficos
    _setCellValue(sheet, fila, 0, 'Elemento Estructural');
    _setCellValue(sheet, fila, 1, 'Cantidad');
    _setCellValue(sheet, fila, 2, 'Porcentaje');
    _setCellValue(sheet, fila, 3, 'Clasificaci√≥n');
    _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#D9E2F3');
    fila++;

    // Ordenar elementos por cantidad
    var elementosOrdenados = estadisticasCategoria.entries
        .where((entry) => entry.value['conteo'] > 0)
        .toList()
      ..sort((a, b) => b.value['conteo'].compareTo(a.value['conteo']));

    int totalCategoria = elementosOrdenados.fold(0, (sum, entry) => sum + entry.value['conteo'] as int);

    // Mostrar elementos
    for (int i = 0; i < elementosOrdenados.length; i++) {
      var entry = elementosOrdenados[i];
      String elemento = entry.key;
      int conteo = entry.value['conteo'];
      double porcentaje = totalCategoria > 0 ? (conteo / totalCategoria) * 100 : 0;
      
      String clasificacion = '';
      if (i == 0) clasificacion = 'Predominante';
      else if (porcentaje > 20) clasificacion = 'Significativo';
      else if (porcentaje > 10) clasificacion = 'Moderado';
      else clasificacion = 'Menor';

      _setCellValue(sheet, fila, 0, elemento);
      _setCellValue(sheet, fila, 1, conteo.toString());
      _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(1)}%');
      _setCellValue(sheet, fila, 3, clasificacion);
      
      // Alternar colores
      String bgColor = fila % 2 == 0 ? '#F9F9F9' : '#FFFFFF';
      _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
      fila++;
    }

    // L√≠nea de separaci√≥n
    fila++;
  }

  return fila;
}

/// Crea matriz de compatibilidad entre sistemas
int _crearMatrizCompatibilidad(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'MATRIZ DE COMPATIBILIDAD DE SISTEMAS');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Descripci√≥n
  _setCellValue(sheet, fila, 0, 'An√°lisis de combinaciones estructurales m√°s frecuentes');
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#F0F8FF');
  fila++;
  fila++;

  // Obtener elementos predominantes de cada categor√≠a
  Map<String, String> elementosPredominantes = {};
  
  final List<String> categoriasClave = ['direccionX', 'direccionY', 'cimentacion'];
  
  for (String categoria in categoriasClave) {
    if (datos['estadisticas']?.containsKey(categoria)) {
      Map<String, dynamic> estadisticas = datos['estadisticas'][categoria];
      if (estadisticas.isNotEmpty) {
        var predominante = estadisticas.entries
            .where((e) => e.value['conteo'] > 0)
            .reduce((a, b) => a.value['conteo'] > b.value['conteo'] ? a : b);
        elementosPredominantes[categoria] = predominante.key;
      }
    }
  }

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Sistema');
  _setCellValue(sheet, fila, 1, 'Elemento Predominante');
  _setCellValue(sheet, fila, 2, 'Compatibilidad');
  _setCellValue(sheet, fila, 3, 'Recomendaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#C6E0B4');
  fila++;

  // An√°lisis de compatibilidad
  final Map<String, String> nombresCategoria = {
    'direccionX': 'Direcci√≥n X',
    'direccionY': 'Direcci√≥n Y',
    'cimentacion': 'Cimentaci√≥n',
  };

  elementosPredominantes.forEach((categoria, elemento) {
    String compatibilidad = _evaluarCompatibilidad(elemento);
    String recomendacion = _obtenerRecomendacion(elemento);
    
    _setCellValue(sheet, fila, 0, nombresCategoria[categoria] ?? categoria);
    _setCellValue(sheet, fila, 1, elemento);
    _setCellValue(sheet, fila, 2, compatibilidad);
    _setCellValue(sheet, fila, 3, recomendacion);
    
    // Color seg√∫n compatibilidad
    String bgColor = '#FFFFFF';
    if (compatibilidad.contains('Alta')) bgColor = '#E8F5E8';
    else if (compatibilidad.contains('Media')) bgColor = '#FFF2CC';
    else if (compatibilidad.contains('Baja')) bgColor = '#FFE8E8';
    
    _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
    fila++;
  });

  return fila;
}

/// Crea evaluaci√≥n de vulnerabilidad
int _crearEvaluacionVulnerabilidad(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'EVALUACI√ìN DE VULNERABILIDAD ESTRUCTURAL');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos de vulnerabilidad
  if (!datos['estadisticas']?.containsKey('vulnerabilidad')) {
    _setCellValue(sheet, fila, 0, 'No hay datos de vulnerabilidad disponibles');
    return fila + 1;
  }

  Map<String, dynamic> vulnerabilidad = datos['estadisticas']['vulnerabilidad'];

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Factor de Vulnerabilidad');
  _setCellValue(sheet, fila, 1, 'Casos Detectados');
  _setCellValue(sheet, fila, 2, 'Nivel de Riesgo');
  _setCellValue(sheet, fila, 3, 'Acci√≥n Requerida');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#FFB366');
  fila++;

  // Factores de vulnerabilidad con niveles de riesgo
  vulnerabilidad.forEach((factor, stats) {
    int conteo = stats['conteo'] ?? 0;
    if (conteo > 0) {
      String nivelRiesgo = _evaluarNivelRiesgo(factor, conteo);
      String accion = _determinarAccion(nivelRiesgo);
      
      _setCellValue(sheet, fila, 0, factor);
      _setCellValue(sheet, fila, 1, conteo.toString());
      _setCellValue(sheet, fila, 2, nivelRiesgo);
      _setCellValue(sheet, fila, 3, accion);
      
      // Color seg√∫n nivel de riesgo
      String bgColor = '#FFFFFF';
      if (nivelRiesgo.contains('Alto')) bgColor = '#FFE8E8';
      else if (nivelRiesgo.contains('Medio')) bgColor = '#FFF2CC';
      else bgColor = '#E8F5E8';
      
      _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
      fila++;
    }
  });

  return fila;
}

/// Crea recomendaciones t√©cnicas espec√≠ficas para sistema estructural
void _crearRecomendacionesTecnicasSistema(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RECOMENDACIONES T√âCNICAS ESPECIALIZADAS');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // An√°lisis de elementos cr√≠ticos
  List<String> recomendacionesCriticas = _generarRecomendacionesCriticas(datos);
  
  _setCellValue(sheet, fila, 0, 'RECOMENDACIONES PRIORITARIAS:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#FFE2CC');
  fila++;

  for (String recomendacion in recomendacionesCriticas) {
    _setCellValue(sheet, fila, 0, recomendacion);
    _aplicarEstilo(sheet, fila, 0, backgroundColor: '#FFF9E6');
    fila++;
  }

  fila++;

  // Conclusi√≥n t√©cnica
  String conclusion = metadatos['conclusiones'] ?? 
      'Se recomienda realizar evaluaciones peri√≥dicas del sistema estructural y mantener un registro actualizado de las condiciones encontradas.';

  _setCellValue(sheet, fila, 0, 'CONCLUSI√ìN T√âCNICA:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E2EFDA');
  fila++;

  _setCellValue(sheet, fila, 0, conclusion);
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#F2F7FF');
}

// === M√âTODOS AUXILIARES ESPEC√çFICOS ===

/// Eval√∫a compatibilidad de elementos estructurales
String _evaluarCompatibilidad(String elemento) {
  // Mapeo de compatibilidades basado en ingenier√≠a estructural
  Map<String, String> compatibilidades = {
    'Marcos de concreto': 'Alta - Sistema r√≠gido confiable',
    'Muros de concreto': 'Alta - Estructura monol√≠tica',
    'Muros confinados': 'Media-Alta - Buen comportamiento s√≠smico',
    'Losa maciza': 'Alta - Distribuci√≥n uniforme de cargas',
    'Zapatas aisladas': 'Media - Requiere buen suelo',
    'Losa de cimentaci√≥n': 'Alta - Distribuci√≥n amplia de cargas',
  };
  
  return compatibilidades[elemento] ?? 'Media - Requiere evaluaci√≥n espec√≠fica';
}

/// Obtiene recomendaci√≥n para elemento espec√≠fico
String _obtenerRecomendacion(String elemento) {
  Map<String, String> recomendaciones = {
    'Marcos de concreto': 'Mantener inspecci√≥n de juntas',
    'Muros de concreto': 'Verificar fisuras peri√≥dicamente',
    'Muros confinados': 'Inspeccionar elementos de confinamiento',
    'Adobe o bahareque': 'Considerar refuerzo urgente',
    'Losa maciza': 'Monitorear deflexiones',
    'Teja': 'Verificar sistema de soporte',
  };
  
  return recomendaciones[elemento] ?? 'Consultar especialista estructural';
}

/// Eval√∫a nivel de riesgo basado en el factor
String _evaluarNivelRiesgo(String factor, int casos) {
  // Factores de alto riesgo
  List<String> factoresAltoRiesgo = [
    'Geometr√≠a irregular',
    'Discontinuidad en planta',
    'Piso blando',
    'Columna corta',
  ];
  
  if (factoresAltoRiesgo.any((f) => factor.toLowerCase().contains(f.toLowerCase()))) {
    return casos > 5 ? 'Riesgo Alto' : 'Riesgo Medio';
  }
  
  return casos > 10 ? 'Riesgo Medio' : 'Riesgo Bajo';
}

/// Determina acci√≥n seg√∫n nivel de riesgo
String _determinarAccion(String nivelRiesgo) {
  switch (nivelRiesgo) {
    case 'Riesgo Alto':
      return 'Evaluaci√≥n estructural inmediata';
    case 'Riesgo Medio':
      return 'Inspecci√≥n detallada en 6 meses';
    case 'Riesgo Bajo':
      return 'Monitoreo rutinario anual';
    default:
      return 'Consultar especialista';
  }
}

/// Genera recomendaciones cr√≠ticas basadas en los datos
List<String> _generarRecomendacionesCriticas(Map<String, dynamic> datos) {
  List<String> recomendaciones = [];
  
  // Verificar sistemas de adobe o bahareque
  if (datos['estadisticas']?['direccionX']?.containsKey('Muros de adobe o bahareque') == true ||
      datos['estadisticas']?['direccionY']?.containsKey('Muros de adobe o bahareque') == true) {
    recomendaciones.add('‚Ä¢ CR√çTICO: Inmuebles con adobe/bahareque requieren refuerzo estructural urgente');
  }
  
  // Verificar vulnerabilidades geom√©tricas
  if (datos['estadisticas']?['vulnerabilidad']?.isNotEmpty == true) {
    recomendaciones.add('‚Ä¢ Implementar medidas correctivas para vulnerabilidades identificadas');
  }
  
  // Recomendaciones generales
  recomendaciones.addAll([
    '‚Ä¢ Establecer programa de inspecci√≥n peri√≥dica seg√∫n tipolog√≠a estructural',
    '‚Ä¢ Capacitar personal en identificaci√≥n de elementos estructurales cr√≠ticos',
    '‚Ä¢ Desarrollar protocolos espec√≠ficos por tipo de sistema estructural',
  ]);
  
  return recomendaciones;
}

  /// Genera un reporte completo de Material Dominante en Excel
/// Incluye an√°lisis detallado de materiales de construcci√≥n predominantes
Future<String> generarReporteMaterialDominanteExcel({
  required String titulo,
  required String subtitulo,
  required Map<String, dynamic> datos,
  required List<Map<String, dynamic>> tablas,
  required Map<String, dynamic> metadatos,
  Directory? directorio,
}) async {
  try {
    print('üìä [EXCEL-MATERIAL] Iniciando generaci√≥n de reporte Excel: $titulo');

    // Crear nuevo libro de Excel usando la librer√≠a excel
    var excel = Excel.createExcel();
    
    // Eliminar hoja por defecto
    excel.delete('Sheet1');
    
    // Crear hoja √∫nica con todo el contenido
    String nombreHoja = 'Material Dominante';
    excel.copy('Sheet1', nombreHoja);
    excel.delete('Sheet1');
    
    Sheet sheet = excel[nombreHoja];
    
    // Crear contenido completo en una sola hoja
    await _crearContenidoMaterialDominanteCompleto(sheet, titulo, subtitulo, datos, tablas, metadatos);

    // Guardar archivo
    final String rutaArchivo = await _guardarArchivoExcelEstandar(
      excel, 
      titulo, 
      directorio
    );
    
    print('‚úÖ [EXCEL-MATERIAL] Reporte Excel generado exitosamente: $rutaArchivo');
    return rutaArchivo;

  } catch (e) {
    print('‚ùå [EXCEL-MATERIAL] Error al generar reporte Excel: $e');
    throw Exception('Error al generar reporte Excel de material dominante: $e');
  }
}

/// Crea todo el contenido del reporte de material dominante en una sola hoja
Future<void> _crearContenidoMaterialDominanteCompleto(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> datos,
  List<Map<String, dynamic>> tablas,
  Map<String, dynamic> metadatos,
) async {
  int filaActual = 0;

  // === SECCI√ìN 1: ENCABEZADO ===
  filaActual = _crearEncabezadoUsoTopografia(sheet, titulo, subtitulo, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 2: FILTROS APLICADOS ===
  filaActual = _crearSeccionFiltrosUsoTopografia(sheet, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 3: RESUMEN ESTAD√çSTICO ===
  filaActual = _crearResumenEstadisticoMaterialDominante(sheet, datos, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 4: AN√ÅLISIS DETALLADO DE MATERIALES ===
  filaActual = _crearAnalisisDetalladoMateriales(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 5: CLASIFICACI√ìN POR RESISTENCIA ===
  filaActual = _crearClasificacionResistencia(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 6: RECOMENDACIONES T√âCNICAS ===
  _crearRecomendacionesTecnicas(sheet, datos, metadatos, filaActual);
}

/// Crea resumen estad√≠stico espec√≠fico para materiales
int _crearResumenEstadisticoMaterialDominante(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RESUMEN ESTAD√çSTICO DE MATERIALES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  // Extraer datos de conteo de materiales
  Map<String, int> conteoMateriales = {};
  if (datos.containsKey('conteoMateriales')) {
    conteoMateriales = Map<String, int>.from(datos['conteoMateriales']);
  }

  // Calcular estad√≠sticas principales
  int materialesDistintos = conteoMateriales.values.where((conteo) => conteo > 0).length;
  int totalMaterialesIdentificados = conteoMateriales.values.fold(0, (sum, conteo) => sum + conteo);
  
  // Calcular √≠ndice de diversidad (Shannon)
  double indiceDiversidad = 0.0;
  if (totalMaterialesIdentificados > 0) {
    for (var conteo in conteoMateriales.values) {
      if (conteo > 0) {
        double proporcion = conteo / totalMaterialesIdentificados;
        indiceDiversidad -= proporcion * (proporcion > 0 ? log(proporcion * 1.4427) : 0); // log2
      }
    }
  }

  // Encabezados de tabla
  _setCellValue(sheet, fila, 0, 'Concepto');
  _setCellValue(sheet, fila, 1, 'Valor');
  _setCellValue(sheet, fila, 2, 'Interpretaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#FFB366');
  fila++;

  // Estad√≠sticas principales
  final List<List<String>> estadisticas = [
    ['Total de inmuebles analizados', '$totalFormatos', '100% de la muestra'],
    ['Materiales distintos identificados', '$materialesDistintos', 'Diversidad de materiales'],
    ['Inmuebles con material identificado', '$totalMaterialesIdentificados', 'Claridad en identificaci√≥n'],
    ['√çndice de diversidad Shannon', indiceDiversidad.toStringAsFixed(2), 
     indiceDiversidad < 1.0 ? 'Baja diversidad' : indiceDiversidad < 2.0 ? 'Diversidad media' : 'Alta diversidad'],
  ];

  // Encontrar material predominante
  if (conteoMateriales.isNotEmpty) {
    final materialPredominante = conteoMateriales.entries
        .where((entry) => entry.value > 0)
        .reduce((a, b) => a.value > b.value ? a : b);
    
    double porcentajePredominante = totalFormatos > 0 ? (materialPredominante.value / totalFormatos) * 100 : 0;
    estadisticas.add([
      'Material predominante', 
      materialPredominante.key, 
      '${materialPredominante.value} inmuebles (${porcentajePredominante.toStringAsFixed(1)}%)'
    ]);
  }

  // Escribir estad√≠sticas
  for (int i = 0; i < estadisticas.length; i++) {
    var stat = estadisticas[i];
    _setCellValue(sheet, fila, 0, stat[0]);
    _setCellValue(sheet, fila, 1, stat[1]);
    _setCellValue(sheet, fila, 2, stat[2]);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 3, bgColor);
    fila++;
  }

  return fila;
}

/// Crea an√°lisis detallado de materiales con caracter√≠sticas t√©cnicas
int _crearAnalisisDetalladoMateriales(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'AN√ÅLISIS DETALLADO DE MATERIALES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos
  if (!datos.containsKey('conteoMateriales') || datos['conteoMateriales'].isEmpty) {
    _setCellValue(sheet, fila, 0, 'No hay datos de materiales disponibles');
    return fila + 1;
  }

  Map<String, int> conteoMateriales = Map<String, int>.from(datos['conteoMateriales']);
  
  // Encabezados de tabla expandida
  _setCellValue(sheet, fila, 0, 'Material');
  _setCellValue(sheet, fila, 1, 'Cantidad');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Resistencia');
  _setCellValue(sheet, fila, 4, 'Durabilidad');
  _setCellValue(sheet, fila, 5, 'Caracter√≠sticas');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 6, '#C6E0B4');
  fila++;

  // Propiedades t√©cnicas de materiales
  Map<String, Map<String, String>> propiedadesMateriales = {
    'Ladrillo': {
      'resistencia': 'Media-Alta',
      'durabilidad': 'Alta',
      'caracteristicas': 'Resistente a compresi√≥n, buen aislamiento t√©rmico'
    },
    'Concreto': {
      'resistencia': 'Alta',
      'durabilidad': 'Muy Alta',
      'caracteristicas': 'Excelente resistencia, versatilidad estructural'
    },
    'Adobe': {
      'resistencia': 'Baja',
      'durabilidad': 'Media',
      'caracteristicas': 'Econ√≥mico, vulnerable a humedad y sismos'
    },
    'Madera/L√°mina/Otros': {
      'resistencia': 'Variable',
      'durabilidad': 'Baja-Media',
      'caracteristicas': 'Flexible, requiere mantenimiento constante'
    },
    'No determinado': {
      'resistencia': 'Desconocida',
      'durabilidad': 'Desconocida',
      'caracteristicas': 'Requiere evaluaci√≥n t√©cnica espec√≠fica'
    },
  };

  // Ordenar materiales por cantidad
  var materialesOrdenados = conteoMateriales.entries
      .where((entry) => entry.value > 0)
      .toList()
    ..sort((a, b) => b.value.compareTo(a.value));

  int totalMateriales = materialesOrdenados.fold(0, (sum, entry) => sum + entry.value);

  // Datos de materiales
  for (int i = 0; i < materialesOrdenados.length; i++) {
    var entry = materialesOrdenados[i];
    String material = entry.key;
    int conteo = entry.value;
    double porcentaje = totalMateriales > 0 ? (conteo / totalMateriales) * 100 : 0;
    
    Map<String, String> propiedades = propiedadesMateriales[material] ?? {
      'resistencia': 'No especificada',
      'durabilidad': 'No especificada',
      'caracteristicas': 'Consultar especificaciones t√©cnicas'
    };

    _setCellValue(sheet, fila, 0, material);
    _setCellValue(sheet, fila, 1, conteo.toString());
    _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(1)}%');
    _setCellValue(sheet, fila, 3, propiedades['resistencia']!);
    _setCellValue(sheet, fila, 4, propiedades['durabilidad']!);
    _setCellValue(sheet, fila, 5, propiedades['caracteristicas']!);
    
    // Alternar colores con c√≥digos espec√≠ficos por nivel de resistencia
    String bgColor = '#FFFFFF';
    if (propiedades['resistencia'] == 'Alta' || propiedades['resistencia'] == 'Muy Alta') {
      bgColor = '#E8F5E8'; // Verde claro para alta resistencia
    } else if (propiedades['resistencia'] == 'Baja') {
      bgColor = '#FFE8E8'; // Rojo claro para baja resistencia
    } else if (fila % 2 == 0) {
      bgColor = '#F2F2F2';
    }
    _aplicarEstiloFila(sheet, fila, 0, 6, bgColor);
    fila++;
  }

  // Fila de total
  _setCellValue(sheet, fila, 0, 'TOTAL');
  _setCellValue(sheet, fila, 1, totalMateriales.toString());
  _setCellValue(sheet, fila, 2, '100%');
  _setCellValue(sheet, fila, 3, 'Mixto');
  _setCellValue(sheet, fila, 4, 'Variable');
  _setCellValue(sheet, fila, 5, 'Combinaci√≥n de propiedades');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 6, '#D9E2F3');
  fila++;

  return fila;
}

/// Crea clasificaci√≥n por resistencia estructural
int _crearClasificacionResistencia(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'CLASIFICACI√ìN POR RESISTENCIA ESTRUCTURAL');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  if (!datos.containsKey('conteoMateriales') || datos['conteoMateriales'].isEmpty) {
    _setCellValue(sheet, fila, 0, 'No hay datos suficientes para clasificaci√≥n');
    return fila + 1;
  }

  Map<String, int> conteoMateriales = Map<String, int>.from(datos['conteoMateriales']);

  // Clasificar materiales por resistencia
  Map<String, List<String>> clasificacionResistencia = {
    'Alta Resistencia': ['Concreto'],
    'Media-Alta Resistencia': ['Ladrillo'],
    'Baja Resistencia': ['Adobe'],
    'Resistencia Variable': ['Madera/L√°mina/Otros'],
    'Sin Clasificar': ['No determinado'],
  };

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Nivel de Resistencia');
  _setCellValue(sheet, fila, 1, 'Materiales');
  _setCellValue(sheet, fila, 2, 'Cantidad Total');
  _setCellValue(sheet, fila, 3, 'Porcentaje');
  _setCellValue(sheet, fila, 4, 'Recomendaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 5, '#F4B183');
  fila++;

  int totalInmuebles = conteoMateriales.values.fold(0, (sum, val) => sum + val);

  // Recomendaciones por nivel de resistencia
  Map<String, String> recomendaciones = {
    'Alta Resistencia': 'Continuar mantenimiento preventivo',
    'Media-Alta Resistencia': 'Monitoreo peri√≥dico, refuerzo opcional',
    'Baja Resistencia': 'Evaluaci√≥n urgente, considerar refuerzo',
    'Resistencia Variable': 'Inspecci√≥n caso por caso',
    'Sin Clasificar': 'Evaluaci√≥n t√©cnica inmediata requerida',
  };

  // Procesar cada nivel de resistencia
  for (var entry in clasificacionResistencia.entries) {
    String nivelResistencia = entry.key;
    List<String> materialesEnNivel = entry.value;
    
    // Calcular total para este nivel
    int cantidadTotal = 0;
    List<String> materialesPresentes = [];
    
    for (String material in materialesEnNivel) {
      if (conteoMateriales.containsKey(material) && conteoMateriales[material]! > 0) {
        cantidadTotal += conteoMateriales[material]!;
        materialesPresentes.add('$material (${conteoMateriales[material]})');
      }
    }
    
    if (cantidadTotal > 0) {
      double porcentaje = totalInmuebles > 0 ? (cantidadTotal / totalInmuebles) * 100 : 0;
      
      _setCellValue(sheet, fila, 0, nivelResistencia);
      _setCellValue(sheet, fila, 1, materialesPresentes.join(', '));
      _setCellValue(sheet, fila, 2, cantidadTotal.toString());
      _setCellValue(sheet, fila, 3, '${porcentaje.toStringAsFixed(1)}%');
      _setCellValue(sheet, fila, 4, recomendaciones[nivelResistencia] ?? 'Consultar especialista');
      
      // Color por nivel de riesgo
      String bgColor = '#FFFFFF';
      if (nivelResistencia.contains('Alta Resistencia')) {
        bgColor = '#E8F5E8'; // Verde
      } else if (nivelResistencia.contains('Baja Resistencia')) {
        bgColor = '#FFE8E8'; // Rojo
      } else if (nivelResistencia.contains('Variable') || nivelResistencia.contains('Sin Clasificar')) {
        bgColor = '#FFF2CC'; // Amarillo
      } else {
        bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
      }
      
      _aplicarEstiloFila(sheet, fila, 0, 5, bgColor);
      fila++;
    }
  }

  return fila;
}

/// Crea secci√≥n de recomendaciones t√©cnicas
void _crearRecomendacionesTecnicas(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RECOMENDACIONES T√âCNICAS Y CONCLUSIONES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  if (!datos.containsKey('conteoMateriales')) {
    _setCellValue(sheet, fila, 0, 'No hay datos suficientes para generar recomendaciones');
    return;
  }

  Map<String, int> conteoMateriales = Map<String, int>.from(datos['conteoMateriales']);
  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  // An√°lisis de riesgos por material predominante
  _setCellValue(sheet, fila, 0, 'AN√ÅLISIS DE RIESGOS:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#FFE2CC');
  fila++;

  // Calcular porcentajes de materiales vulnerables
  int materialesVulnerables = (conteoMateriales['Adobe'] ?? 0) + 
                              (conteoMateriales['Madera/L√°mina/Otros'] ?? 0);
  double porcentajeVulnerable = totalFormatos > 0 ? (materialesVulnerables / totalFormatos) * 100 : 0;

  int materialesResistentes = (conteoMateriales['Concreto'] ?? 0) + 
                              (conteoMateriales['Ladrillo'] ?? 0);
  double porcentajeResistente = totalFormatos > 0 ? (materialesResistentes / totalFormatos) * 100 : 0;

  _setCellValue(sheet, fila, 0, '‚Ä¢ Materiales vulnerables: ${porcentajeVulnerable.toStringAsFixed(1)}% ($materialesVulnerables inmuebles)');
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#FFE8E8');
  fila++;

  _setCellValue(sheet, fila, 0, '‚Ä¢ Materiales resistentes: ${porcentajeResistente.toStringAsFixed(1)}% ($materialesResistentes inmuebles)');
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#E8F5E8');
  fila++;

  fila++;

  // Recomendaciones espec√≠ficas
  _setCellValue(sheet, fila, 0, 'RECOMENDACIONES ESPEC√çFICAS:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#E2EFDA');
  fila++;

  List<String> recomendaciones = [];

  if (porcentajeVulnerable > 30) {
    recomendaciones.add('‚Ä¢ PRIORIDAD ALTA: Implementar programa de refuerzo masivo para inmuebles con materiales vulnerables');
  }

  if (porcentajeVulnerable > 50) {
    recomendaciones.add('‚Ä¢ Establecer plan de evacuaci√≥n para zonas con alta concentraci√≥n de materiales de bajo desempe√±o');
  }

  if (conteoMateriales['No determinado'] != null && conteoMateriales['No determinado']! > 0) {
    double porcentajeIndeterminado = (conteoMateriales['No determinado']! / totalFormatos) * 100;
    recomendaciones.add('‚Ä¢ Realizar evaluaciones t√©cnicas espec√≠ficas para ${porcentajeIndeterminado.toStringAsFixed(1)}% de inmuebles sin material determinado');
  }

  recomendaciones.addAll([
    '‚Ä¢ Establecer programa de mantenimiento preventivo para materiales de alta resistencia',
    '‚Ä¢ Desarrollar normativas espec√≠ficas para cada tipo de material identificado',
    '‚Ä¢ Capacitar evaluadores en identificaci√≥n precisa de materiales de construcci√≥n',
  ]);

  // Escribir recomendaciones
  for (String recomendacion in recomendaciones) {
    _setCellValue(sheet, fila, 0, recomendacion);
    _aplicarEstilo(sheet, fila, 0, backgroundColor: '#F9F9F9');
    fila++;
  }

  fila++;

  // Conclusi√≥n final
  String materialPredominante = 'No determinado';
  if (conteoMateriales.isNotEmpty) {
    final entry = conteoMateriales.entries
        .where((e) => e.value > 0)
        .reduce((a, b) => a.value > b.value ? a : b);
    materialPredominante = entry.key;
  }

  String conclusion = metadatos['conclusiones'] ?? 
      'Material predominante identificado: $materialPredominante. Se recomienda continuar con el monitoreo y evaluaci√≥n de materiales para optimizar las estrategias de refuerzo estructural.';

  _setCellValue(sheet, fila, 0, 'CONCLUSI√ìN:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#D9E2F3');
  fila++;

  _setCellValue(sheet, fila, 0, conclusion);
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#F2F7FF');
}

 Future<String> generarReporteUsoTopografiaExcel({
  required String titulo,
  required String subtitulo,
  required Map<String, dynamic> datos,
  required List<Map<String, dynamic>> tablas,
  required Map<String, dynamic> metadatos,
  Directory? directorio,
}) async {
  try {
    print('üìä [EXCEL-USO] Iniciando generaci√≥n de reporte Excel: $titulo');

    // Crear nuevo libro de Excel usando la librer√≠a excel
    var excel = Excel.createExcel();
    
    // Eliminar hoja por defecto
    excel.delete('Sheet1');
    
    // Crear hoja √∫nica con todo el contenido
    String nombreHoja = 'Uso de Vivienda y Topograf√≠a';
    excel.copy('Sheet1', nombreHoja);
    excel.delete('Sheet1');
    
    Sheet sheet = excel[nombreHoja];
    
    // Crear contenido completo en una sola hoja
    await _crearContenidoUsoTopografiaCompleto(sheet, titulo, subtitulo, datos, tablas, metadatos);

    // Guardar archivo
    final String rutaArchivo = await _guardarArchivoExcelEstandar(
      excel, 
      titulo, 
      directorio
    );
    
    print('‚úÖ [EXCEL-USO] Reporte Excel generado exitosamente: $rutaArchivo');
    return rutaArchivo;

  } catch (e) {
    print('‚ùå [EXCEL-USO] Error al generar reporte Excel: $e');
    throw Exception('Error al generar reporte Excel de uso y topograf√≠a: $e');
  }
}

/// Crea todo el contenido del reporte en una sola hoja usando la librer√≠a excel est√°ndar
Future<void> _crearContenidoUsoTopografiaCompleto(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> datos,
  List<Map<String, dynamic>> tablas,
  Map<String, dynamic> metadatos,
) async {
  int filaActual = 0; // Empezar desde fila 0 (excel package usa base 0)

  // === SECCI√ìN 1: ENCABEZADO ===
  filaActual = _crearEncabezadoUsoTopografia(sheet, titulo, subtitulo, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 2: FILTROS APLICADOS ===
  filaActual = _crearSeccionFiltrosUsoTopografia(sheet, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 3: RESUMEN ESTAD√çSTICO ===
  filaActual = _crearResumenEstadisticoUsoTopografia(sheet, datos, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 4: AN√ÅLISIS DE USO DE VIVIENDA ===
  filaActual = _crearAnalisisUsoVivienda(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 5: AN√ÅLISIS DE TOPOGRAF√çA ===
  filaActual = _crearAnalisisTopografia(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 6: COMPARATIVA Y CONCLUSIONES ===
  _crearSeccionComparativaYConclusiones(sheet, datos, metadatos, filaActual);
}

/// Crea encabezado principal del reporte
int _crearEncabezadoUsoTopografia(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo principal (fusionar celdas A-F)
  _setCellValue(sheet, fila, 0, titulo.toUpperCase());
  _aplicarEstiloEncabezado(sheet, fila, 0, bold: true, fontSize: 16, backgroundColor: '#1F4E79');
  fila++;

  // Subt√≠tulo
  _setCellValue(sheet, fila, 0, subtitulo);
  _aplicarEstiloEncabezado(sheet, fila, 0, bold: true, fontSize: 14, backgroundColor: '#2F5F8F');
  fila++;

  // Fecha de generaci√≥n
  String fechaGeneracion = DateFormat('dd/MM/yyyy HH:mm').format(DateTime.now());
  _setCellValue(sheet, fila, 0, 'Generado el: $fechaGeneracion');
  _aplicarEstiloEncabezado(sheet, fila, 0, fontSize: 10, backgroundColor: '#E7E6E6');
  fila++;

  return fila;
}

/// Crea secci√≥n de filtros aplicados
int _crearSeccionFiltrosUsoTopografia(
  Sheet sheet,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'FILTROS APLICADOS');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Lista de filtros
  final List<List<String>> filtros = [
    ['Nombre inmueble:', metadatos['nombreInmueble'] ?? 'Todos'],
    ['Per√≠odo:', '${metadatos['fechaInicio']} - ${metadatos['fechaFin']}'],
    ['Usuario creador:', metadatos['usuarioCreador'] ?? 'Todos'],
    ['Total formatos:', '${metadatos['totalFormatos']}'],
  ];

  // Agregar ubicaciones si existen
  if (metadatos['ubicaciones'] != null && metadatos['ubicaciones'].isNotEmpty) {
    final List<Map<String, dynamic>> ubicaciones = metadatos['ubicaciones'];
    for (int i = 0; i < ubicaciones.length && i < 3; i++) {
      final ubi = ubicaciones[i];
      String ubicacionStr = '${ubi['municipio']}, ${ubi['ciudad']}';
      if (ubi['colonia'] != null && ubi['colonia'].isNotEmpty) {
        ubicacionStr += ', ${ubi['colonia']}';
      }
      filtros.add(['Ubicaci√≥n ${i + 1}:', ubicacionStr]);
    }
  }

  // Escribir filtros
  for (var filtro in filtros) {
    _setCellValue(sheet, fila, 0, filtro[0]);
    _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#F2F2F2');
    
    _setCellValue(sheet, fila, 1, filtro[1]);
    _aplicarEstilo(sheet, fila, 1, backgroundColor: '#FAFAFA');
    
    fila++;
  }

  return fila;
}

/// Crea resumen estad√≠stico general
int _crearResumenEstadisticoUsoTopografia(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'RESUMEN ESTAD√çSTICO GENERAL');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;

  // Calcular estad√≠sticas de uso
  int totalUsosRegistrados = 0;
  int tiposUsoDistintos = 0;
  if (datos.containsKey('usosVivienda') && datos['usosVivienda']['estadisticas'] != null) {
    Map<String, dynamic> estadisticasUsos = datos['usosVivienda']['estadisticas'];
    totalUsosRegistrados = estadisticasUsos.values.fold(0, (sum, stats) => sum + (stats['conteo'] as int? ?? 0));
    tiposUsoDistintos = estadisticasUsos.values.where((stats) => (stats['conteo'] as int? ?? 0) > 0).length;
  }

  // Calcular estad√≠sticas de topograf√≠a
  int totalTopografiaRegistrada = 0;
  int tiposTopografiaDistintos = 0;
  if (datos.containsKey('topografia') && datos['topografia']['estadisticas'] != null) {
    Map<String, dynamic> estadisticasTopografia = datos['topografia']['estadisticas'];
    totalTopografiaRegistrada = estadisticasTopografia.values.fold(0, (sum, stats) => sum + (stats['conteo'] as int? ?? 0));
    tiposTopografiaDistintos = estadisticasTopografia.values.where((stats) => (stats['conteo'] as int? ?? 0) > 0).length;
  }

  // Encabezados
  _setCellValue(sheet, fila, 0, 'Concepto');
  _setCellValue(sheet, fila, 1, 'Valor');
  _setCellValue(sheet, fila, 2, 'Observaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#70AD47');
  fila++;

  // Datos estad√≠sticos
  final List<List<String>> estadisticas = [
    ['Total de inmuebles evaluados', '$totalFormatos', '100% de la muestra'],
    ['Tipos de uso identificados', '$tiposUsoDistintos', 'Diversidad de uso'],
    ['Total registros de uso', '$totalUsosRegistrados', 'Algunos inmuebles pueden tener m√∫ltiples usos'],
    ['Tipos de topograf√≠a identificados', '$tiposTopografiaDistintos', 'Variedad topogr√°fica'],
    ['Total registros de topograf√≠a', '$totalTopografiaRegistrada', 'Caracter√≠sticas del terreno'],
  ];

  for (int i = 0; i < estadisticas.length; i++) {
    var stat = estadisticas[i];
    _setCellValue(sheet, fila, 0, stat[0]);
    _setCellValue(sheet, fila, 1, stat[1]);
    _setCellValue(sheet, fila, 2, stat[2]);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 3, bgColor);
    fila++;
  }

  return fila;
}

/// Crea an√°lisis detallado de uso de vivienda
int _crearAnalisisUsoVivienda(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'AN√ÅLISIS DETALLADO DE USO DE VIVIENDA');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos
  if (!datos.containsKey('usosVivienda') || 
      !datos['usosVivienda'].containsKey('estadisticas')) {
    _setCellValue(sheet, fila, 0, 'No hay datos de uso de vivienda disponibles');
    return fila + 1;
  }

  Map<String, dynamic> estadisticasUsos = datos['usosVivienda']['estadisticas'];
  
  // Encabezados de tabla
  _setCellValue(sheet, fila, 0, 'Tipo de Uso');
  _setCellValue(sheet, fila, 1, 'Cantidad');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Observaciones');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#9BC2E6');
  fila++;

  // Ordenar datos por cantidad
  var usosOrdenados = estadisticasUsos.entries
      .where((entry) => entry.value['conteo'] > 0)
      .toList()
    ..sort((a, b) => b.value['conteo'].compareTo(a.value['conteo']));

  int totalUsos = usosOrdenados.fold(0, (sum, entry) => sum + entry.value['conteo'] as int);

  // Datos de uso
  for (int i = 0; i < usosOrdenados.length; i++) {
    var entry = usosOrdenados[i];
    String uso = entry.key;
    int conteo = entry.value['conteo'];
    double porcentaje = totalUsos > 0 ? (conteo / totalUsos) * 100 : 0;
    
    String observacion = '';
    if (i == 0) observacion = 'Uso predominante';
    else if (porcentaje > 20) observacion = 'Uso significativo';
    else if (porcentaje > 10) observacion = 'Uso moderado';
    else observacion = 'Uso menor';

    _setCellValue(sheet, fila, 0, uso);
    _setCellValue(sheet, fila, 1, conteo.toString());
    _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(1)}%');
    _setCellValue(sheet, fila, 3, observacion);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
    fila++;
  }

  // Fila de total
  _setCellValue(sheet, fila, 0, 'TOTAL');
  _setCellValue(sheet, fila, 1, totalUsos.toString());
  _setCellValue(sheet, fila, 2, '100%');
  _setCellValue(sheet, fila, 3, 'Suma de todos los usos');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#D9E2F3');
  fila++;

  return fila;
}

/// Crea an√°lisis detallado de topograf√≠a
int _crearAnalisisTopografia(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'AN√ÅLISIS DETALLADO DE TOPOGRAF√çA');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos
  if (!datos.containsKey('topografia') || 
      !datos['topografia'].containsKey('estadisticas')) {
    _setCellValue(sheet, fila, 0, 'No hay datos de topograf√≠a disponibles');
    return fila + 1;
  }

  Map<String, dynamic> estadisticasTopografia = datos['topografia']['estadisticas'];
  
  // Encabezados de tabla
  _setCellValue(sheet, fila, 0, 'Tipo de Topograf√≠a');
  _setCellValue(sheet, fila, 1, 'Cantidad');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Caracter√≠sticas');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#A9D18E');
  fila++;

  // Ordenar datos por cantidad
  var topografiaOrdenada = estadisticasTopografia.entries
      .where((entry) => entry.value['conteo'] > 0)
      .toList()
    ..sort((a, b) => b.value['conteo'].compareTo(a.value['conteo']));

  int totalTopografia = topografiaOrdenada.fold(0, (sum, entry) => sum + entry.value['conteo'] as int);

  // Datos de topograf√≠a con caracter√≠sticas
  Map<String, String> caracteristicasTopografia = {
    'Planicie': 'Terreno plano, estable para construcci√≥n',
    'Fondo de valle': 'Zona baja, posible riesgo de inundaci√≥n',
    'Ladera de cerro': 'Pendiente, riesgo de deslizamiento',
    'Dep√≥sitos lacustres': 'Suelo blando, requiere cimentaci√≥n especial',
    'Rivera r√≠o/lago': 'Zona h√∫meda, considerar nivel fre√°tico',
    'Costa': 'Ambiente salino, requiere materiales resistentes',
  };

  for (int i = 0; i < topografiaOrdenada.length; i++) {
    var entry = topografiaOrdenada[i];
    String tipo = entry.key;
    int conteo = entry.value['conteo'];
    double porcentaje = totalTopografia > 0 ? (conteo / totalTopografia) * 100 : 0;
    String caracteristica = caracteristicasTopografia[tipo] ?? 'Consultar especificaciones t√©cnicas';

    _setCellValue(sheet, fila, 0, tipo);
    _setCellValue(sheet, fila, 1, conteo.toString());
    _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(1)}%');
    _setCellValue(sheet, fila, 3, caracteristica);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
    fila++;
  }

  // Fila de total
  _setCellValue(sheet, fila, 0, 'TOTAL');
  _setCellValue(sheet, fila, 1, totalTopografia.toString());
  _setCellValue(sheet, fila, 2, '100%');
  _setCellValue(sheet, fila, 3, 'Todas las caracter√≠sticas identificadas');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#E2EFDA');
  fila++;

  return fila;
}

/// Crea secci√≥n de comparativa y conclusiones
void _crearSeccionComparativaYConclusiones(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'COMPARATIVA Y CONCLUSIONES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // An√°lisis comparativo
  _setCellValue(sheet, fila, 0, 'AN√ÅLISIS COMPARATIVO');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#FFE2CC');
  fila++;

  // Encontrar uso y topograf√≠a predominantes
  String usoPredominante = 'No determinado';
  String topografiaPredominante = 'No determinado';

  // Buscar uso m√°s com√∫n
  if (datos.containsKey('usosVivienda') && datos['usosVivienda']['estadisticas'] != null) {
    Map<String, dynamic> estadisticasUsos = datos['usosVivienda']['estadisticas'];
    var usoMax = estadisticasUsos.entries
        .where((entry) => entry.value['conteo'] > 0)
        .fold<MapEntry<String, dynamic>?>(null, (prev, curr) => prev == null || curr.value['conteo'] > prev.value['conteo'] ? curr : prev);
    if (usoMax != null) usoPredominante = usoMax.key;
  }

  // Buscar topograf√≠a m√°s com√∫n
  if (datos.containsKey('topografia') && datos['topografia']['estadisticas'] != null) {
    Map<String, dynamic> estadisticasTopografia = datos['topografia']['estadisticas'];
    var topoMax = estadisticasTopografia.entries
        .where((entry) => entry.value['conteo'] > 0)
        .fold<MapEntry<String, dynamic>?>(null, (prev, curr) => prev == null || (curr as MapEntry<String, dynamic>).value['conteo'] > prev.value['conteo'] ? curr : prev);
    if (topoMax != null) topografiaPredominante = topoMax.key;
  }

  // Comparativa
  _setCellValue(sheet, fila, 0, 'Uso predominante:');
  _setCellValue(sheet, fila, 1, usoPredominante);
  _aplicarEstilo(sheet, fila, 0, bold: true);
  fila++;

  _setCellValue(sheet, fila, 0, 'Topograf√≠a predominante:');
  _setCellValue(sheet, fila, 1, topografiaPredominante);
  _aplicarEstilo(sheet, fila, 0, bold: true);
  fila++;

  fila++;

  // Conclusiones
  String conclusiones = metadatos['conclusiones'] ?? 'No hay conclusiones disponibles.';
  _setCellValue(sheet, fila, 0, 'CONCLUSIONES:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#FFF2CC');
  fila++;

  // Dividir conclusiones en l√≠neas m√°s manejables
  List<String> lineasConclusiones = conclusiones.split('\n').where((linea) => linea.trim().isNotEmpty).toList();
  
  for (String linea in lineasConclusiones) {
    _setCellValue(sheet, fila, 0, linea.trim());
    _aplicarEstilo(sheet, fila, 0, backgroundColor: '#FFF9E6');
    fila++;
  }
}

/// Guarda el archivo Excel usando la librer√≠a excel est√°ndar
Future<String> _guardarArchivoExcelEstandar(
  Excel excel,
  String titulo,
  Directory? directorio,
) async {
  try {
    // Obtener directorio de destino
    final directorioFinal = directorio ?? await FileStorageService().obtenerDirectorioDescargas();
    
    // Crear subdirectorio para reportes Excel si no existe
    final directorioReportes = Directory('${directorioFinal.path}/cenapp/reportes_excel');
    if (!await directorioReportes.exists()) {
      await directorioReportes.create(recursive: true);
    }

    // Generar nombre de archivo √∫nico
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final nombreLimpio = _limpiarNombreArchivo(titulo);
    final nombreArchivo = '${nombreLimpio}_$timestamp.xlsx';
    final rutaCompleta = '${directorioReportes.path}/$nombreArchivo';

    // Guardar archivo
    final List<int>? bytes = excel.save();
    if (bytes != null) {
      final File archivo = File(rutaCompleta);
      await archivo.writeAsBytes(bytes);

      // Verificar que el archivo se guard√≥ correctamente
      if (await archivo.exists() && await archivo.length() > 0) {
        print('‚úÖ [EXCEL-USO] Archivo Excel guardado: $rutaCompleta (${await archivo.length()} bytes)');
        return rutaCompleta;
      } else {
        throw Exception('El archivo Excel no se guard√≥ correctamente');
      }
    } else {
      throw Exception('No se pudieron generar los bytes del archivo Excel');
    }

  } catch (e) {
    print('‚ùå [EXCEL-USO] Error al guardar archivo Excel: $e');
    throw Exception('Error al guardar archivo Excel: $e');
  }
}

// === M√âTODOS AUXILIARES PARA FORMATEO (usando librer√≠a excel est√°ndar) ===

/// Establece valor en una celda
void _setCellValue(Sheet sheet, int fila, int columna, String valor) {
  sheet.cell(CellIndex.indexByColumnRow(columnIndex: columna, rowIndex: fila)).value = TextCellValue(valor);
}

/// Aplica estilo de encabezado
void _aplicarEstiloEncabezado(Sheet sheet, int fila, int columna, {bool bold = false, int fontSize = 12, String backgroundColor = '#FFFFFF'}) {
  var cell = sheet.cell(CellIndex.indexByColumnRow(columnIndex: columna, rowIndex: fila));
  cell.cellStyle = CellStyle(
    bold: bold,
    fontSize: fontSize,
    backgroundColorHex: ExcelColor.white,
  );
}



/// Aplica estilo general
void _aplicarEstilo(Sheet sheet, int fila, int columna, {bool bold = false, String backgroundColor = '#FFFFFF'}) {
  var cell = sheet.cell(CellIndex.indexByColumnRow(columnIndex: columna, rowIndex: fila));
  cell.cellStyle = CellStyle(
    bold: bold,
    backgroundColorHex: ExcelColor.white,
  );
}

/// Aplica estilo a header de tabla
void _aplicarEstiloTablaHeader(Sheet sheet, int fila, int columnaInicio, int numColumnas, String backgroundColor) {
  for (int i = 0; i < numColumnas; i++) {
    var cell = sheet.cell(CellIndex.indexByColumnRow(columnIndex: columnaInicio + i, rowIndex: fila));
    cell.cellStyle = CellStyle(
      bold: true,
      backgroundColorHex: ExcelColor.white,
    );
  }
}

/// Aplica estilo a una fila completa
void _aplicarEstiloFila(Sheet sheet, int fila, int columnaInicio, int numColumnas, String backgroundColor) {
  for (int i = 0; i < numColumnas; i++) {
    var cell = sheet.cell(CellIndex.indexByColumnRow(columnIndex: columnaInicio + i, rowIndex: fila));
    cell.cellStyle = CellStyle(
      backgroundColorHex: ExcelColor.white,
    );
  }
}

/// Limpia el nombre del archivo para el sistema de archivos
String _limpiarNombreArchivo(String nombre) {
  return nombre
      .toLowerCase()
      .replaceAll(' ', '_')
      .replaceAll(RegExp(r'[^a-z0-9_]'), '')
      .replaceAll(RegExp(r'_+'), '_')
      .trim();
}
/// Aplica estilo de secci√≥n
  void _aplicarEstiloSeccion(Sheet hoja, int fila, int columna) {
    try {
      final celda = CellIndex.indexByColumnRow(columnIndex: columna, rowIndex: fila);
      hoja.cell(celda).cellStyle = CellStyle(
        bold: true,
        fontSize: 12,
        fontFamily: getFontFamily(FontFamily.Arial),
        backgroundColorHex: ExcelColor.lightBlue,
        fontColorHex: ExcelColor.black,
      );
    } catch (e) {
      print('‚ö†Ô∏è Error aplicando estilo secci√≥n: $e');
    }
  }



  /// Genera un reporte completo de Resumen General en Excel
  Future<String> generarReporteResumenGeneralExcel({
    required String titulo,
  required String subtitulo,
  required Map<String, dynamic> datos,
  required List<Map<String, dynamic>> tablas,
  required Map<String, dynamic> metadatos,
  Directory? directorio,
}) async {
  try {
    print('üìä [EXCEL-RESUMEN] Iniciando generaci√≥n optimizada de reporte Excel: $titulo');

    // Crear nuevo libro de Excel usando la librer√≠a excel
    var excel = Excel.createExcel();
    
    // Eliminar hoja por defecto
    excel.delete('Sheet1');
    
    // Crear hoja √∫nica con TODO el contenido del resumen general
    String nombreHoja = 'Resumen General Completo';
    excel.copy('Sheet1', nombreHoja);
    excel.delete('Sheet1');
    
    Sheet sheet = excel[nombreHoja];
    
    // Crear contenido completo en una sola hoja
    await _crearContenidoResumenGeneralCompleto(sheet, titulo, subtitulo, datos, tablas, metadatos);

    // Guardar archivo
    final String rutaArchivo = await _guardarArchivoExcelEstandar(
      excel, 
      titulo, 
      directorio
    );
    
    print('‚úÖ [EXCEL-RESUMEN] Reporte Excel optimizado generado exitosamente: $rutaArchivo');
    return rutaArchivo;

  } catch (e) {
    print('‚ùå [EXCEL-RESUMEN] Error al generar reporte Excel optimizado: $e');
    throw Exception('Error al generar reporte Excel: $e');
  }
}

/// Crea todo el contenido del resumen general en una sola hoja
Future<void> _crearContenidoResumenGeneralCompleto(
  Sheet sheet,
  String titulo,
  String subtitulo,
  Map<String, dynamic> datos,
  List<Map<String, dynamic>> tablas,
  Map<String, dynamic> metadatos,
) async {
  int filaActual = 0;

  // === SECCI√ìN 1: ENCABEZADO ===
  filaActual = _crearEncabezadoUsoTopografia(sheet, titulo, subtitulo, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 2: FILTROS APLICADOS ===
  filaActual = _crearSeccionFiltrosUsoTopografia(sheet, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 3: ESTAD√çSTICAS GENERALES ===
  filaActual = _crearEstadisticasGeneralesResumen(sheet, datos, metadatos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 4: DISTRIBUCI√ìN POR CIUDADES ===
  filaActual = _crearDistribucionCiudades(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 5: DISTRIBUCI√ìN POR COLONIAS (TOP 10) ===
  filaActual = _crearDistribucionColonias(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 6: DISTRIBUCI√ìN TEMPORAL ===
  filaActual = _crearDistribucionTemporal(sheet, datos, filaActual);
  filaActual += 2;

  // === SECCI√ìN 7: INDICADORES CLAVE ===
  _crearIndicadoresClave(sheet, datos, metadatos, filaActual);
}

/// Crea estad√≠sticas generales del resumen
int _crearEstadisticasGeneralesResumen(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'ESTAD√çSTICAS GENERALES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;
  
  // Extraer datos de distribuci√≥n geogr√°fica
  Map<String, int> ciudades = {};
  Map<String, int> colonias = {};
  Map<String, int> meses = {};
  
  if (datos.containsKey('distribucionGeografica')) {
    ciudades = Map<String, int>.from(datos['distribucionGeografica']['ciudades'] ?? {});
    colonias = Map<String, int>.from(datos['distribucionGeografica']['colonias'] ?? {});
  }
  
  if (datos.containsKey('distribucionTemporal')) {
    meses = Map<String, int>.from(datos['distribucionTemporal']['meses'] ?? {});
  }

  // Encabezados de tabla
  _setCellValue(sheet, fila, 0, 'Concepto');
  _setCellValue(sheet, fila, 1, 'Valor');
  _setCellValue(sheet, fila, 2, 'Porcentaje/Observaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 3, '#70AD47');
  fila++;

  // Estad√≠sticas principales
  final List<List<String>> estadisticas = [
    ['Total de inmuebles evaluados', '$totalFormatos', '100%'],
    ['Ciudades cubiertas', '${ciudades.length}', 'Cobertura geogr√°fica'],
    ['Colonias cubiertas', '${colonias.length}', 'Distribuci√≥n local'],
    ['Per√≠odos analizados', '${meses.length}', 'Cobertura temporal'],
  ];

  // Encontrar ciudad principal
  if (ciudades.isNotEmpty) {
    final ciudadPrincipal = ciudades.entries.reduce((a, b) => a.value > b.value ? a : b);
    final porcentajeCiudad = totalFormatos > 0 ? (ciudadPrincipal.value / totalFormatos * 100) : 0;
    estadisticas.add([
      'Ciudad principal', 
      '${ciudadPrincipal.key}', 
      '${ciudadPrincipal.value} inmuebles (${porcentajeCiudad.toStringAsFixed(1)}%)'
    ]);
  }

  // Encontrar mes m√°s activo
  if (meses.isNotEmpty) {
    final mesPrincipal = meses.entries.reduce((a, b) => a.value > b.value ? a : b);
    estadisticas.add([
      'Mes m√°s activo', 
      '${mesPrincipal.key}', 
      '${mesPrincipal.value} evaluaciones'
    ]);
  }

  // Escribir estad√≠sticas
  for (int i = 0; i < estadisticas.length; i++) {
    var stat = estadisticas[i];
    _setCellValue(sheet, fila, 0, stat[0]);
    _setCellValue(sheet, fila, 1, stat[1]);
    _setCellValue(sheet, fila, 2, stat[2]);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 3, bgColor);
    fila++;
  }

  return fila;
}

/// Crea distribuci√≥n por ciudades
int _crearDistribucionCiudades(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'DISTRIBUCI√ìN POR CIUDADES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos
  if (!datos.containsKey('distribucionGeografica') || 
      datos['distribucionGeografica']['ciudades'].isEmpty) {
    _setCellValue(sheet, fila, 0, 'No hay datos de distribuci√≥n por ciudades disponibles');
    return fila + 1;
  }

  Map<String, int> ciudades = Map<String, int>.from(datos['distribucionGeografica']['ciudades']);
  
  // Encabezados
  _setCellValue(sheet, fila, 0, 'Ciudad');
  _setCellValue(sheet, fila, 1, 'Cantidad');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Clasificaci√≥n');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#9BC2E6');
  fila++;

  // Ordenar ciudades por cantidad
  var ciudadesOrdenadas = ciudades.entries.toList()
    ..sort((a, b) => b.value.compareTo(a.value));

  int totalCiudades = ciudades.values.fold(0, (sum, val) => sum + val);

  for (int i = 0; i < ciudadesOrdenadas.length; i++) {
    var entry = ciudadesOrdenadas[i];
    String ciudad = entry.key;
    int conteo = entry.value;
    double porcentaje = totalCiudades > 0 ? (conteo / totalCiudades) * 100 : 0;
    
    String clasificacion = '';
    if (i == 0) clasificacion = 'Principal';
    else if (porcentaje > 15) clasificacion = 'Significativa';
    else if (porcentaje > 5) clasificacion = 'Moderada';
    else clasificacion = 'Menor';

    _setCellValue(sheet, fila, 0, ciudad);
    _setCellValue(sheet, fila, 1, conteo.toString());
    _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(2)}%');
    _setCellValue(sheet, fila, 3, clasificacion);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
    fila++;
  }

  // Total
  _setCellValue(sheet, fila, 0, 'TOTAL');
  _setCellValue(sheet, fila, 1, totalCiudades.toString());
  _setCellValue(sheet, fila, 2, '100%');
  _setCellValue(sheet, fila, 3, 'Todas las ciudades');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#D9E2F3');
  fila++;

  return fila;
}

/// Crea distribuci√≥n por colonias (top 10)
int _crearDistribucionColonias(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'DISTRIBUCI√ìN POR COLONIAS (TOP 10)');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos
  if (!datos.containsKey('distribucionGeografica') || 
      datos['distribucionGeografica']['colonias'].isEmpty) {
    _setCellValue(sheet, fila, 0, 'No hay datos de distribuci√≥n por colonias disponibles');
    return fila + 1;
  }

  Map<String, int> colonias = Map<String, int>.from(datos['distribucionGeografica']['colonias']);
  
  // Encabezados
  _setCellValue(sheet, fila, 0, 'Colonia');
  _setCellValue(sheet, fila, 1, 'Cantidad');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Ranking');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#A9D18E');
  fila++;

  // Ordenar colonias y tomar top 10
  var coloniasOrdenadas = colonias.entries.toList()
    ..sort((a, b) => b.value.compareTo(a.value));
  
  var coloniasTop10 = coloniasOrdenadas.take(10).toList();
  int totalColonias = colonias.values.fold(0, (sum, val) => sum + val);

  for (int i = 0; i < coloniasTop10.length; i++) {
    var entry = coloniasTop10[i];
    String colonia = entry.key;
    int conteo = entry.value;
    double porcentaje = totalColonias > 0 ? (conteo / totalColonias) * 100 : 0;

    _setCellValue(sheet, fila, 0, colonia);
    _setCellValue(sheet, fila, 1, conteo.toString());
    _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(2)}%');
    _setCellValue(sheet, fila, 3, '#${i + 1}');
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
    fila++;
  }

  // Nota sobre el resto
  if (colonias.length > 10) {
    int restantes = colonias.length - 10;
    int conteoRestantes = totalColonias - coloniasTop10.fold(0, (sum, entry) => sum + entry.value);
    double porcentajeRestantes = totalColonias > 0 ? (conteoRestantes / totalColonias) * 100 : 0;
    
    _setCellValue(sheet, fila, 0, 'Otras $restantes colonias');
    _setCellValue(sheet, fila, 1, conteoRestantes.toString());
    _setCellValue(sheet, fila, 2, '${porcentajeRestantes.toStringAsFixed(2)}%');
    _setCellValue(sheet, fila, 3, 'Resto');
    _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#E2EFDA');
    fila++;
  }

  return fila;
}

/// Crea distribuci√≥n temporal
int _crearDistribucionTemporal(
  Sheet sheet,
  Map<String, dynamic> datos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'DISTRIBUCI√ìN TEMPORAL');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Verificar si hay datos
  if (!datos.containsKey('distribucionTemporal') || 
      datos['distribucionTemporal']['meses'].isEmpty) {
    _setCellValue(sheet, fila, 0, 'No hay datos de distribuci√≥n temporal disponibles');
    return fila + 1;
  }

  Map<String, int> meses = Map<String, int>.from(datos['distribucionTemporal']['meses']);
  
  // Encabezados
  _setCellValue(sheet, fila, 0, 'Per√≠odo (MM/YYYY)');
  _setCellValue(sheet, fila, 1, 'Evaluaciones');
  _setCellValue(sheet, fila, 2, 'Porcentaje');
  _setCellValue(sheet, fila, 3, 'Tendencia');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#F4CCCC');
  fila++;

  // Ordenar meses cronol√≥gicamente
  var mesesOrdenados = meses.entries.toList()
    ..sort((a, b) {
      try {
        final fechaA = DateFormat('MM/yyyy').parse(a.key);
        final fechaB = DateFormat('MM/yyyy').parse(b.key);
        return fechaA.compareTo(fechaB);
      } catch (e) {
        return a.key.compareTo(b.key);
      }
    });

  int totalEvaluaciones = meses.values.fold(0, (sum, val) => sum + val);
  double promedioMensual = totalEvaluaciones / meses.length;

  for (int i = 0; i < mesesOrdenados.length; i++) {
    var entry = mesesOrdenados[i];
    String mes = entry.key;
    int conteo = entry.value;
    double porcentaje = totalEvaluaciones > 0 ? (conteo / totalEvaluaciones) * 100 : 0;
    
    String tendencia = '';
    if (conteo > promedioMensual * 1.2) tendencia = 'Alta actividad';
    else if (conteo > promedioMensual * 0.8) tendencia = 'Actividad normal';
    else tendencia = 'Baja actividad';

    _setCellValue(sheet, fila, 0, mes);
    _setCellValue(sheet, fila, 1, conteo.toString());
    _setCellValue(sheet, fila, 2, '${porcentaje.toStringAsFixed(2)}%');
    _setCellValue(sheet, fila, 3, tendencia);
    
    // Alternar colores
    String bgColor = fila % 2 == 0 ? '#F2F2F2' : '#FFFFFF';
    _aplicarEstiloFila(sheet, fila, 0, 4, bgColor);
    fila++;
  }

  // Promedio mensual
  _setCellValue(sheet, fila, 0, 'PROMEDIO MENSUAL');
  _setCellValue(sheet, fila, 1, promedioMensual.toStringAsFixed(1));
  _setCellValue(sheet, fila, 2, '${(100 / meses.length).toStringAsFixed(1)}%');
  _setCellValue(sheet, fila, 3, 'Referencia estad√≠stica');
  _aplicarEstiloTablaHeader(sheet, fila, 0, 4, '#FFE2CC');
  fila++;

  return fila;
}

/// Crea indicadores clave y conclusiones
void _crearIndicadoresClave(
  Sheet sheet,
  Map<String, dynamic> datos,
  Map<String, dynamic> metadatos,
  int filaInicial,
) {
  int fila = filaInicial;

  // T√≠tulo de secci√≥n
  _setCellValue(sheet, fila, 0, 'INDICADORES CLAVE Y CONCLUSIONES');
  _aplicarEstiloSeccion(sheet, fila, 0);
  fila++;

  // Calcular concentraci√≥n geogr√°fica
  Map<String, int> ciudades = {};
  if (datos.containsKey('distribucionGeografica')) {
    ciudades = Map<String, int>.from(datos['distribucionGeografica']['ciudades'] ?? {});
  }

  if (ciudades.isNotEmpty && ciudades.length > 1) {
    final totalEvaluaciones = ciudades.values.fold(0, (sum, val) => sum + val);
    double indiceHerfindahl = 0;
    
    for (var conteo in ciudades.values) {
      double proporcion = conteo / totalEvaluaciones;
      indiceHerfindahl += proporcion * proporcion;
    }
    
    String nivelConcentracion;
    if (indiceHerfindahl > 0.7) {
      nivelConcentracion = 'Alta concentraci√≥n geogr√°fica';
    } else if (indiceHerfindahl > 0.4) {
      nivelConcentracion = 'Concentraci√≥n geogr√°fica media';
    } else {
      nivelConcentracion = 'Distribuci√≥n geogr√°fica uniforme';
    }

    _setCellValue(sheet, fila, 0, 'Concentraci√≥n geogr√°fica:');
    _setCellValue(sheet, fila, 1, nivelConcentracion);
    _setCellValue(sheet, fila, 2, '√çndice: ${(indiceHerfindahl * 100).toStringAsFixed(1)}%');
    _aplicarEstilo(sheet, fila, 0, bold: true);
    fila++;
  }

  // Resumen ejecutivo
  _setCellValue(sheet, fila, 0, 'RESUMEN EJECUTIVO:');
  _aplicarEstilo(sheet, fila, 0, bold: true, backgroundColor: '#FFF2CC');
  fila++;

  final int totalFormatos = metadatos['totalFormatos'] ?? 0;
  String resumenEjecutivo = 'Se analizaron $totalFormatos inmuebles distribuidos en ${ciudades.length} ciudades durante el per√≠odo especificado. ';
  
  if (ciudades.isNotEmpty) {
    final ciudadPrincipal = ciudades.entries.reduce((a, b) => a.value > b.value ? a : b);
    resumenEjecutivo += 'La ciudad con mayor concentraci√≥n de evaluaciones fue ${ciudadPrincipal.key} con ${ciudadPrincipal.value} inmuebles. ';
  }
  
  resumenEjecutivo += 'Este an√°lisis proporciona una base s√≥lida para la planificaci√≥n de recursos y toma de decisiones en evaluaciones estructurales futuras.';

  _setCellValue(sheet, fila, 0, resumenEjecutivo);
  _aplicarEstilo(sheet, fila, 0, backgroundColor: '#FFF9E6');
  fila++;
}
}